<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveProperty.Core</name>
    </assembly>
    <members>
        <member name="T:Reactive.Bindings.Extensions.IDisposableExtensions">
            <summary>
            IDisposable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.IDisposableExtensions.AddTo``1(``0,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
            Add disposable(self) to CompositeDisposable(or other ICollection)
            </summary>
        </member>
        <member name="T:Reactive.Bindings.IHasErrors">
            <summary>
            </summary>
        </member>
        <member name="P:Reactive.Bindings.IHasErrors.ObserveErrorChanged">
            <summary>
            Gets the observe error changed.
            </summary>
            <value>The observe error changed.</value>
        </member>
        <member name="P:Reactive.Bindings.IHasErrors.ObserveHasErrors">
            <summary>
            Gets the observe has errors.
            </summary>
            <value>The observe has errors.</value>
        </member>
        <member name="T:Reactive.Bindings.Internals.AccessorCache`1">
            <summary>
            Accessor Cache
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
        </member>
        <member name="M:Reactive.Bindings.Internals.AccessorCache`1.LookupGet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String@)">
            <summary>
            Lookups the get.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Internals.AccessorCache`1.LookupNestedGet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String@)">
            <summary>
            Lookups the get.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Internals.AccessorCache`1.LookupSet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String@)">
            <summary>
            Lookups the set.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.IReactiveProperty">
            <summary>
            for EventToReactive and Serialization
            </summary>
        </member>
        <member name="P:Reactive.Bindings.IReactiveProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Reactive.Bindings.IReactiveProperty.ForceNotify">
            <summary>
            Forces the notify.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.IReactiveProperty`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Reactive.Bindings.IHasErrors"/>
        </member>
        <member name="P:Reactive.Bindings.IReactiveProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Reactive.Bindings.IReadOnlyReactiveProperty">
            <summary>
            </summary>
        </member>
        <member name="P:Reactive.Bindings.IReadOnlyReactiveProperty.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Reactive.Bindings.IReadOnlyReactiveProperty`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Reactive.Bindings.IReadOnlyReactiveProperty`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Reactive.Bindings.ReactivePropertyMode">
            <summary>
            Mode of ReactiveProperty
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.DistinctUntilChanged">
            <summary>
            If next value is same as current, not set and not notify.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.RaiseLatestValueOnSubscribe">
            <summary>
            Push notify on instance created and subscribed.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.IgnoreInitialValidationError">
            <summary>
            Ignore initial validation error
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.IgnoreException">
            <summary>
            Ignore exception
            </summary>
        </member>
        <member name="F:Reactive.Bindings.ReactivePropertyMode.Default">
            <summary>
            Default mode value. It is same as DistinctUntilChanged | RaiseLatestValueOnSubscribe.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactivePropertySlim`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Reactive.Bindings.ReactivePropertySlim`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.ReactivePropertySlim`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactivePropertySlim`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactivePropertySlim`1.IsDistinctUntilChanged">
            <summary>
            Gets a value indicating whether this instance is distinct until changed.
            </summary>
            <value><c>true</c> if this instance is distinct until changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactivePropertySlim`1.IsRaiseLatestValueOnSubscribe">
            <summary>
            Gets a value indicating whether this instance is raise latest value on subscribe.
            </summary>
            <value>
            <c>true</c> if this instance is raise latest value on subscribe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertySlim`1.#ctor(`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ReactivePropertySlim`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertySlim`1.ForceNotify">
            <summary>
            Forces the notify.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertySlim`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>
            A reference to an interface that allows observers to stop receiving notifications before
            the provider has finished sending them.
            </returns>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertySlim`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertySlim`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactivePropertySlim`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Reactive.Bindings.IReadOnlyReactiveProperty`1"/>
            <seealso cref="T:Reactive.Bindings.Internals.IObserverLinkedList`1"/>
            <seealso cref="T:System.IObserver`1"/>
        </member>
        <member name="E:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.#ctor(System.IObservable{`0},`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ReadOnlyReactivePropertySlim`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>
            A reference to an interface that allows observers to stop receiving notifications before
            the provider has finished sending them.
            </returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactivePropertySlim`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactivePropertySlim">
            <summary>
            </summary>
            <seealso cref="T:Reactive.Bindings.IReadOnlyReactiveProperty`1"/>
            <seealso cref="T:Reactive.Bindings.Internals.IObserverLinkedList`1"/>
            <seealso cref="T:System.IObserver`1"/>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactivePropertySlim.ToReadOnlyReactivePropertySlim``1(System.IObservable{``0},``0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            To the read only reactive property slim.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="equalityComparer">The equality comparer.</param>
            <returns></returns>
        </member>
    </members>
</doc>
