<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveProperty</name>
    </assembly>
    <members>
        <member name="T:Reactive.Bindings.AsyncReactiveCommand">
            <summary>
            Represents AsyncReactiveCommand&lt;object&gt;
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.#ctor">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.#ctor(System.IObservable{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.#ctor(System.IObservable{System.Boolean},Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.#ctor(Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true. The
            source is shared between other AsyncReactiveCommand.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.Execute">
            <summary>
            Push null to subscribers.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.ExecuteAsync">
            <summary>
            Push null to subscribers.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand.Subscribe(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe execute.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.AsyncReactiveCommand`1">
            <summary>
            Async version ReactiveCommand
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Reactive.Bindings.AsyncReactiveCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.#ctor">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.#ctor(System.IObservable{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.#ctor(System.IObservable{System.Boolean},Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.#ctor(Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true. The
            source is shared between other AsyncReactiveCommand.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.CanExecute">
            <summary>
            Return current canExecute status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Return current canExecute status. parameter is ignored.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.Execute(`0)">
            <summary>
            Push parameter to subscribers, when executing CanExecuting is changed to false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.ExecuteAsync(`0)">
            <summary>
            Push parameter to subscribers, when executing CanExecuting is changed to false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Push parameter to subscribers, when executing CanExecuting is changed to false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.Subscribe(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Subscribe execute.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommand`1.Dispose">
            <summary>
            Stop all subscription and lock CanExecute is false.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.AsyncReactiveCommandExtensions">
            <summary>
            AsyncReactiveCommand factory and extension methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand(System.IObservable{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand(System.IObservable{System.Boolean},Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand``1(System.IObservable{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand``1(System.IObservable{System.Boolean},Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand(Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true. The
            source is shared between other AsyncReactiveCommand.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.ToAsyncReactiveCommand``1(Reactive.Bindings.IReactiveProperty{System.Boolean})">
            <summary>
            CanExecute is automatically changed when executing to false and finished to true. The
            source is shared between other AsyncReactiveCommand.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.WithSubscribe(Reactive.Bindings.AsyncReactiveCommand,System.Func{System.Threading.Tasks.Task},System.Action{System.IDisposable})">
            <summary>
            Subscribe execute.
            </summary>
            <param name="self">AsyncReactiveCommand</param>
            <param name="asyncAction">Action</param>
            <param name="postProcess">Handling of the subscription.</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.WithSubscribe``1(Reactive.Bindings.AsyncReactiveCommand{``0},System.Func{``0,System.Threading.Tasks.Task},System.Action{System.IDisposable})">
            <summary>
            Subscribe execute.
            </summary>
            <typeparam name="T">AsyncReactiveCommand type argument.</typeparam>
            <param name="self">AsyncReactiveCommand</param>
            <param name="asyncAction">Action</param>
            <param name="postProcess">Handling of the subscription.</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.WithSubscribe(Reactive.Bindings.AsyncReactiveCommand,System.Func{System.Threading.Tasks.Task},System.IDisposable@)">
            <summary>
            Subscribe execute.
            </summary>
            <param name="self">AsyncReactiveCommand</param>
            <param name="asyncAction">Action</param>
            <param name="disposable">The return value of self.Subscribe(asyncAction)</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.AsyncReactiveCommandExtensions.WithSubscribe``1(Reactive.Bindings.AsyncReactiveCommand{``0},System.Func{``0,System.Threading.Tasks.Task},System.IDisposable@)">
            <summary>
            Subscribe execute.
            </summary>
            <typeparam name="T">AsyncReactiveCommand type argument.</typeparam>
            <param name="self">AsyncReactiveCommand</param>
            <param name="asyncAction">Action</param>
            <param name="disposable">The return value of self.Subscribe(asyncAction)</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="T:Reactive.Bindings.Binding.RxBindingExtensions">
            <summary>
            RxProperty POCO binding support extension methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxBindingExtensions.BindTo``3(Reactive.Bindings.ReactiveProperty{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},Reactive.Bindings.Binding.BindingMode,System.Func{``0,``2},System.Func{``2,``0},System.IObservable{System.Reactive.Unit},``2,``0)">
            <summary>
            RxProperty POCO binding support method.
            </summary>
            <typeparam name="T">ReactiveProperty type parameter</typeparam>
            <typeparam name="TTarget">Binding target type</typeparam>
            <typeparam name="TProperty">Binding target property type</typeparam>
            <param name="self">Source ReactiveProperty</param>
            <param name="target">Binding target instance.</param>
            <param name="propertySelector">Binding target property selector.</param>
            <param name="mode">Binding mode</param>
            <param name="convert">source -&gt; target converter.</param>
            <param name="convertBack">target -&gt; source converter.</param>
            <param name="targetUpdateTrigger">targetUpdateTrigger. required TowWay and OneWayToSource</param>
            <param name="propertyFallbackValue">target error value.</param>
            <param name="sourceFallbackValue">source error value.</param>
            <returns>Release binding disposable.</returns>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxBindingExtensions.BindTo``3(Reactive.Bindings.ReadOnlyReactiveProperty{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``0,``2},``2)">
            <summary>
            RxProperty POCO binding support method.
            </summary>
            <typeparam name="T">ReactiveProperty type parameter</typeparam>
            <typeparam name="TTarget">Binding target type</typeparam>
            <typeparam name="TProperty">Binding target property type</typeparam>
            <param name="self">Source ReactiveProperty</param>
            <param name="target">Binding target instance.</param>
            <param name="propertySelector">Binding target property selector.</param>
            <param name="convert">source -&gt; target converter.</param>
            <param name="propertyFallbackValue">target error value.</param>
            <returns>Release binding disposable.</returns>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxBindingExtensions.BindTo``3(Reactive.Bindings.ReactivePropertySlim{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},Reactive.Bindings.Binding.BindingMode,System.Func{``0,``2},System.Func{``2,``0},System.IObservable{System.Reactive.Unit},``2,``0)">
            <summary>
            RxProperty POCO binding support method.
            </summary>
            <typeparam name="T">ReactiveProperty type parameter</typeparam>
            <typeparam name="TTarget">Binding target type</typeparam>
            <typeparam name="TProperty">Binding target property type</typeparam>
            <param name="self">Source ReactiveProperty</param>
            <param name="target">Binding target instance.</param>
            <param name="propertySelector">Binding target property selector.</param>
            <param name="mode">Binding mode</param>
            <param name="convert">source -&gt; target converter.</param>
            <param name="convertBack">target -&gt; source converter.</param>
            <param name="targetUpdateTrigger">targetUpdateTrigger. required TowWay and OneWayToSource</param>
            <param name="propertyFallbackValue">target error value.</param>
            <param name="sourceFallbackValue">source error value.</param>
            <returns>Release binding disposable.</returns>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxBindingExtensions.BindTo``3(Reactive.Bindings.ReadOnlyReactivePropertySlim{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``0,``2},``2)">
            <summary>
            RxProperty POCO binding support method.
            </summary>
            <typeparam name="T">ReactiveProperty type parameter</typeparam>
            <typeparam name="TTarget">Binding target type</typeparam>
            <typeparam name="TProperty">Binding target property type</typeparam>
            <param name="self">Source ReactiveProperty</param>
            <param name="target">Binding target instance.</param>
            <param name="propertySelector">Binding target property selector.</param>
            <param name="convert">source -&gt; target converter.</param>
            <param name="propertyFallbackValue">target error value.</param>
            <returns>Release binding disposable.</returns>
        </member>
        <member name="T:Reactive.Bindings.Binding.BindingMode">
            <summary>
            Binding mode.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Binding.BindingMode.OneWay">
            <summary>
            source to target.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Binding.BindingMode.TwoWay">
            <summary>
            sync source and target.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Binding.BindingMode.OneWayToSource">
            <summary>
            target to source.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Binding.RxCommandExtensions">
            <summary>
            ReactiveCommand bind to EventHandler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxCommandExtensions.ToEventHandler(Reactive.Bindings.ReactiveCommand)">
            <summary>
            To the event handler.
            </summary>
            <param name="self">The self.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxCommandExtensions.ToEventHandler``1(Reactive.Bindings.ReactiveCommand)">
            <summary>
            To the event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="self">The self.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Binding.RxCommandExtensions.ToEventHandler``2(Reactive.Bindings.ReactiveCommand{``1},System.Func{``0,``1})">
            <summary>
            To the event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.CatchIgnoreObservableExtensions">
            <summary>
            Catch Ignore Observable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CatchIgnoreObservableExtensions.CatchIgnore``1(System.IObservable{``0})">
            <summary>
            Catch exception and return Observable.Empty.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CatchIgnoreObservableExtensions.CatchIgnore``2(System.IObservable{``0},System.Action{``1})">
            <summary>
            Catch exception and return Observable.Empty.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.CombineLatestEnumerableExtensions">
            <summary>
            Combine Latest Enumerable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CombineLatestEnumerableExtensions.CombineLatestValuesAreAllTrue(System.Collections.Generic.IEnumerable{System.IObservable{System.Boolean}})">
            <summary>
            Latest values of each sequence are all true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.CombineLatestEnumerableExtensions.CombineLatestValuesAreAllFalse(System.Collections.Generic.IEnumerable{System.IObservable{System.Boolean}})">
            <summary>
            Latest values of each sequence are all false.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.DisposePreviousValueExtensions">
            <summary>
            DisposePreviousValue Ovservable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.DisposePreviousValueExtensions.DisposePreviousValue``1(System.IObservable{``0})">
            <summary>
            Dispose previous value automatically.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.ICommandExtensions">
            <summary>
            ICommand Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ICommandExtensions.CanExecuteChangedAsObservable``1(``0)">
            <summary>
            Converts CanExecuteChanged to an observable sequence.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions">
            <summary>
            INotify Collection Changed Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.CollectionChangedAsObservable``1(``0)">
            <summary>
            Converts CollectionChanged to an observable sequence.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveAddChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Add and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveAddChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Add.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveRemoveChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Remove and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveRemoveChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Remove.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveMoveChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Move and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveMoveChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Move.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveReplaceChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Replace and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveReplaceChangedItems``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Replace.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyCollectionChangedExtensions.ObserveResetChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Observe CollectionChanged:Reset.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.INotifyDataErrorInfoExtensions">
            <summary>
            INotify Data Error Info Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyDataErrorInfoExtensions.ErrorsChangedAsObservable``1(``0)">
            <summary>
            Converts ErrorsChanged to an observable sequence.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyDataErrorInfoExtensions.ObserveErrorInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Converts target property's ErrorsChanged to an observable sequence.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions">
            <summary>
            INotify Property Changed Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.PropertyChangedAsObservable``1(``0)">
            <summary>
            Converts PropertyChanged to an observable sequence.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ObserveProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Converts NotificationObject's property changed to an observable sequence.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="raiseEventScheduler">The raise event scheduler.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="raiseEventScheduler">The raise event scheduler.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}},System.Func{System.IObservable{``2},System.IObservable{``1}},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertyAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}},System.Func{System.IObservable{``2},System.IObservable{``1}},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="raiseEventScheduler">The raise event scheduler.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <param name="ignoreValidationErrorValue">Ignore validation error value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertySlimAsSynchronized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Reactive.Bindings.ReactivePropertyMode)">
            <summary>
            <para>Converts NotificationObject's property to ReactivePropertySlim. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertySlimAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},Reactive.Bindings.ReactivePropertyMode)">
            <summary>
            <para>Converts NotificationObject's property to ReactivePropertySlim. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.INotifyPropertyChangedExtensions.ToReactivePropertySlimAsSynchronized``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}},System.Func{System.IObservable{``2},System.IObservable{``1}},Reactive.Bindings.ReactivePropertyMode)">
            <summary>
            <para>Converts NotificationObject's property to ReactiveProperty. Value is two-way synchronized.</para>
            <para>PropertyChanged raise on selected scheduler.</para>
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="subject">The subject.</param>
            <param name="propertySelector">Argument is self, Return is target property.</param>
            <param name="convert">Convert selector to ReactiveProperty.</param>
            <param name="convertBack">Convert selector to source.</param>
            <param name="mode">ReactiveProperty mode.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.InverseObservableExtensions">
            <summary>
            IObservable of bool extension methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.InverseObservableExtensions.Inverse(System.IObservable{System.Boolean})">
            <summary>
            Inverse bool value.
            </summary>
            <param name="self">IObservable of bool</param>
            <returns>Inverse IObservable of bool</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.ObservableCollectionExtensions">
            <summary>
            ObservableCollectionExtensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Add and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Add.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Remove and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Remove.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Move and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Move.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Replace and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChangedItems``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Replace.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveResetChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Reset.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementProperty``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe</param>
            <returns>Property sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementObservableProperty``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TElement">Collection element type</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementPropertyChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TElement">Type of Element</typeparam>
            <param name="source">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Add and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveAddChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Add.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Remove and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveRemoveChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Remove.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Move and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveMoveChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Move.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Replace and take single item.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveReplaceChangedItems``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Replace.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveResetChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe CollectionChanged:Reset.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementProperty``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe.</param>
            <returns>Property sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementObservableProperty``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TElement">Collection element type</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservableCollectionExtensions.ObserveElementPropertyChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TElement">Type of Element</typeparam>
            <param name="source">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.OldNewPair`1">
            <summary>
            Value pair of OldItem and NewItem.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.OldNewPair`1.OldItem">
            <summary>
            Gets the old item.
            </summary>
            <value>The old item.</value>
        </member>
        <member name="P:Reactive.Bindings.Extensions.OldNewPair`1.NewItem">
            <summary>
            Gets the new item.
            </summary>
            <value>The new item.</value>
        </member>
        <member name="M:Reactive.Bindings.Extensions.OldNewPair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.Extensions.OldNewPair`1"/> class.
            </summary>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Reactive.Bindings.Extensions.OldNewPair`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.ObservablePairwiseExtensions">
            <summary>
            Observable Pairwise Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservablePairwiseExtensions.Pairwise``1(System.IObservable{``0})">
            <summary>
            Projects old and new element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ObservablePairwiseExtensions.Pairwise``2(System.IObservable{``0},System.Func{``0,``0,``1})">
            <summary>
            Projects old and new element of a sequence into a new form.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.PropertyPack`2">
            <summary>
            Represents property and instance package.
            </summary>
            <typeparam name="TInstance">Type of instance</typeparam>
            <typeparam name="TValue">Type of property value</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Instance">
            <summary>
            Gets instance which has property.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Property">
            <summary>
            Gets target property info.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.PropertyPack`2.Value">
            <summary>
            Gets target property value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.PropertyPack`2.#ctor(`0,System.Reflection.PropertyInfo,`1)">
            <summary>
            Create instance.
            </summary>
            <param name="instance">Target instance</param>
            <param name="property">Target property info</param>
            <param name="value">Property value</param>
        </member>
        <member name="T:Reactive.Bindings.Extensions.PropertyPack">
            <summary>
            Provides PropertyPack static members.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.PropertyPack.Create``2(``0,System.Reflection.PropertyInfo,``1)">
            <summary>
            Create instance.
            </summary>
            <param name="instance">Target instance</param>
            <param name="property">Target property info</param>
            <param name="value">Property value</param>
            <returns>Created instance</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.RetryObservableExtensions">
            <summary>
            Retry Observable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``1(System.IObservable{``0})">
            <summary>
            <para>Repeats the source observable sequence until it successfully terminates.</para>
            <para>This is same as Retry().</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1})">
            <summary>
            When exception is caught, do onError action and repeat observable sequence.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.TimeSpan)">
            <summary>
            When exception is caught, do onError action and repeat observable sequence after delay time.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32)">
            <summary>
            When exception is caught, do onError action and repeat observable sequence during within retryCount.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan)">
            <summary>
            When exception is caught, do onError action and repeat observable sequence after delay time
            during within retryCount.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.RetryObservableExtensions.OnErrorRetry``2(System.IObservable{``0},System.Action{``1},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            When exception is caught, do onError action and repeat observable sequence after delay
            time(work on delayScheduler) during within retryCount.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Extensions.SenderEventArgsPair`2">
            <summary>
            Represents event sender and argument pair.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Extensions.SenderEventArgsPair`2.Sender">
            <summary>
            Gets event sender.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Extensions.SenderEventArgsPair`2.EventArgs">
            <summary>
            Gets event argument.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.SenderEventArgsPair`2.#ctor(`0,`1)">
            <summary>
            Create instance.
            </summary>
            <param name="sender">sender value</param>
            <param name="eventArgs">event arguments</param>
        </member>
        <member name="T:Reactive.Bindings.Extensions.SenderEventArgsPair">
            <summary>
            Provides SenderEventArgsPair static members.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.SenderEventArgsPair.Create``2(``0,``1)">
            <summary>
            Create instance.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments</typeparam>
            <param name="sender">sender value</param>
            <param name="eventArgs">event arguments</param>
            <returns>Created instance.</returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.ToUnitObservableExtensions">
            <summary>
            To Unit Observable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.ToUnitObservableExtensions.ToUnit``1(System.IObservable{``0})">
            <summary>
            To the unit.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Extensions.UIDispatcherObservableExtensions">
            <summary>
            UI Dispatcher Observable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.UIDispatcherObservableExtensions.ObserveOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Observe on UIDispatcherScheduler.</para>
            <para>
            UIDispatcherScheduler is created when access to UIDispatcher.Default first in the whole application.
            </para>
            <para>
            If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.
            </para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Extensions.UIDispatcherObservableExtensions.SubscribeOnUIDispatcher``1(System.IObservable{``0})">
            <summary>
            <para>Subscribe on UIDispatcherScheduler.</para>
            <para>
            UIDispatcherScheduler is created when access to UIDispatcher.Default first in the whole application.
            </para>
            <para>
            If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.
            </para>
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Helpers.CollectionUtilities">
            <summary>
            Collection utilities for creating ObserveElementProperty, ObserveElementObservableProperty and ObserveElementPropertyChanged extension methods for custom collection classes.
            If you would like to use those methods on ObservableCollection, then please use pre defined extension methods for ObservableCollection.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.CollectionUtilities.ObserveElementProperty``3(``0,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe</param>
            <returns>Property value sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.CollectionUtilities.ObserveElementObservableProperty``3(``0,System.Linq.Expressions.Expression{System.Func{``1,System.IObservable{``2}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of collection element</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.CollectionUtilities.ObserveElementPropertyChanged``2(``0)">
            <summary>
            Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TCollection">Type of collection</typeparam>
            <typeparam name="TElement">Type of element</typeparam>
            <param name="source">The source.</param>
            <returns>PropertyChanged event stream.</returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Reactive.Bindings.Helpers.CollectionUtilities.ObserveElementCore``3(``0,System.Func{``1,System.IObserver{``2},System.IDisposable})">
            <summary>
            Core logic of ObserveElementXXXXX methods.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TElement">Type of element.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">source collection</param>
            <param name="subscribeAction">element subscribe logic.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1">
            <summary>
            real time filtered collection interface.
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
        </member>
        <member name="P:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1.Count">
            <summary>
            Collection items count.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1.Item(System.Int32)">
            <summary>
            Get item at index.
            </summary>
            <param name="index">index</param>
            <returns>item</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection`1.Refresh(System.Func{`0,System.Boolean})">
            <summary>
            Refresh filter.
            </summary>
            <param name="filter">filter</param>
        </member>
        <member name="T:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3">
            <summary>
            real time filtered collection.
            </summary>
            <typeparam name="TCollection">type of source collection</typeparam>
            <typeparam name="TElement">type of collection item</typeparam>
            <typeparam name="TTrigger">type for IObservable to notify source status changed</typeparam>
        </member>
        <member name="E:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.CollectionChanged">
            <summary>
            CollectionChanged event.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.#ctor(`0,System.Func{`1,System.Boolean},System.Func{`1,System.IObservable{`2}})">
            <summary>
            constructor
            </summary>
            <param name="source">source collection</param>
            <param name="filter">filter function</param>
            <param name="elementChangedFactory">IObservable to notify source status changed</param>
        </member>
        <member name="P:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.Item(System.Int32)">
            <summary>
            Gets the Element at the specified index.
            </summary>
            <value>The Element/&gt;.</value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.GetEnumerator">
            <summary>
            get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.Dispose">
            <summary>
            disconnect source collection.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection`3.Refresh(System.Func{`1,System.Boolean})">
            <summary>
            Refresh filter.
            </summary>
            <param name="filter">filter</param>
        </member>
        <member name="T:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection">
            <summary>
            FilteredReadOnlyObservableCollection factory methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ReadOnlyObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Func{``0,System.Boolean},System.Func{``0,System.IObservable{``1}})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ReadOnlyObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <typeparam name="U">Type of return type for elementStatusChangedFactory</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <param name="elementStatusChangedFactory">IObservable to notify source status changed</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToFilteredReadOnlyObservableCollection``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.Boolean},System.Func{``0,System.IObservable{``1}})">
            <summary>
            create IFilteredReadOnlyObservableCollection from ObservableCollection
            </summary>
            <typeparam name="T">Type of collection item.</typeparam>
            <typeparam name="U">Type of return type for elementStatusChangedFactory</typeparam>
            <param name="self">Source collection.</param>
            <param name="filter">Filter function.</param>
            <param name="elementStatusChangedFactory">IObservable to notify source status changed</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToReadOnlyReactiveCollection``1(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            create ReadOnlyReactiveCollection from IFilteredReadOnlyObservableCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollection.ToReadOnlyReactiveCollection``2(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            create ReadOnlyReactiveCollection from IFilteredReadOnlyObservableCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self">The self.</param>
            <param name="converter">The converter.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollectionExtensions">
            <summary>
            IFilteredReadOnlyObservableCollection extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollectionExtensions.ObserveElementProperty``2(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Observe collection element's property.
            </summary>
            <typeparam name="TElement">Type of element</typeparam>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="source">Data source</param>
            <param name="propertySelector">Property selection expression</param>
            <param name="isPushCurrentValueAtFirst">Push current value on first subscribe</param>
            <returns>Property sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollectionExtensions.ObserveElementObservableProperty``2(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
            <summary>
            Observe collection element's IObservable sequence.
            </summary>
            <typeparam name="TElement">Collection element type</typeparam>
            <typeparam name="TProperty">Type of observable property element</typeparam>
            <param name="source">Source collection</param>
            <param name="propertySelector">IObservable selection expression</param>
            <returns>IObservable sequence sequence</returns>
        </member>
        <member name="M:Reactive.Bindings.Helpers.FilteredReadOnlyObservableCollectionExtensions.ObserveElementPropertyChanged``1(Reactive.Bindings.Helpers.IFilteredReadOnlyObservableCollection{``0})">
            <summary>
            Observe collection element's PropertyChanged event.
            </summary>
            <typeparam name="TElement">Type of Element</typeparam>
            <param name="source">source collection</param>
            <returns>PropertyChanged event stream.</returns>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.DelegateConverter`2">
            <summary>
            EventToReactiveCommand's converter.
            </summary>
            <typeparam name="T">source type</typeparam>
            <typeparam name="U">dest type</typeparam>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.DelegateConverter`2.OnConvert(System.IObservable{`0})">
            <summary>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.DelegateConverter`2.OnConvert(`0)">
            <summary>
            converter method.
            </summary>
            <param name="source">source value</param>
            <returns>dest value</returns>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.IEventToReactiveConverter">
            <summary>
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.IEventToReactiveConverter.AssociateObject">
            <summary>
            Gets or sets the associate object.
            </summary>
            <value>The associate object.</value>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.IEventToReactiveConverter.Convert(System.IObservable{System.Object})">
            <summary>
            Converts the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.Interactivity.ReactiveConverter`2">
            <summary>
            EventToReactiveCommand's converter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="P:Reactive.Bindings.Interactivity.ReactiveConverter`2.AssociateObject">
            <summary>
            EventToReactiveCommand's AssociateObject
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.ReactiveConverter`2.Convert(System.IObservable{System.Object})">
            <summary>
            Converts the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.Interactivity.ReactiveConverter`2.OnConvert(System.IObservable{`0})">
            <summary>
            Converts
            </summary>
            <param name="source">source</param>
            <returns>dest</returns>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.BooleanNotifier">
            <summary>
            Notify boolean flag.
            </summary>
        </member>
        <member name="E:Reactive.Bindings.Notifiers.BooleanNotifier.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.Notifiers.BooleanNotifier.Value">
            <summary>
            Current flag value
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.#ctor(System.Boolean)">
            <summary>
            Setup initial flag.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.TurnOn">
            <summary>
            Set and raise true if current value isn't true.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.TurnOff">
            <summary>
            Set and raise false if current value isn't false.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.SwitchValue">
            <summary>
            Set and raise reverse value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.Subscribe(System.IObserver{System.Boolean})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BooleanNotifier.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.BusyNotifier">
            <summary>
            Notify of busy.
            </summary>
        </member>
        <member name="E:Reactive.Bindings.Notifiers.BusyNotifier.PropertyChanged">
            <summary>
            property changed event handler
            </summary>
        </member>
        <member name="P:Reactive.Bindings.Notifiers.BusyNotifier.IsBusy">
            <summary>
            Is process running.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BusyNotifier.ProcessStart">
            <summary>
            Process start.
            </summary>
            <returns>Call dispose method when process end.</returns>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.BusyNotifier.Subscribe(System.IObserver{System.Boolean})">
            <summary>
            Subscribe busy.
            </summary>
            <param name="observer">observer</param>
            <returns>disposable</returns>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.CountChangedStatus">
            <summary>
            Event kind of CountNotifier.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Increment">
            <summary>
            Count incremented.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Decrement">
            <summary>
            Count decremented.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Empty">
            <summary>
            Count is zero.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.CountChangedStatus.Max">
            <summary>
            Count arrived max.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.CountNotifier">
            <summary>
            Notify event of count flag.
            </summary>
        </member>
        <member name="E:Reactive.Bindings.Notifiers.CountNotifier.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.Notifiers.CountNotifier.Max">
            <summary>
            Gets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Reactive.Bindings.Notifiers.CountNotifier.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.#ctor(System.Int32)">
            <summary>
            Setup max count of signal.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Increment(System.Int32)">
            <summary>
            Increment count and notify status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Decrement(System.Int32)">
            <summary>
            Decrement count and notify status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.CountNotifier.Subscribe(System.IObserver{Reactive.Bindings.Notifiers.CountChangedStatus})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IMessagePublisher">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.IMessagePublisher.Publish``1(``0)">
            <summary>
            Send Message to all receiver.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IMessageSubscriber">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.IMessageSubscriber.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe typed message.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IMessageBroker">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IAsyncMessagePublisher">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.IAsyncMessagePublisher.PublishAsync``1(``0)">
            <summary>
            Send Message to all receiver and await complete.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IAsyncMessageSubscriber">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.IAsyncMessageSubscriber.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribe typed message.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.IAsyncMessageBroker">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.MessageBroker">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.MessageBroker.Default">
            <summary>
            MessageBroker in Global scope.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.MessageBroker.Publish``1(``0)">
            <summary>
            Send Message to all receiver.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.MessageBroker.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe typed message.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.MessageBroker.Dispose">
            <summary>
            Stop Pub-Sub system.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.AsyncMessageBroker">
            <summary>
            In-Memory PubSub filtered by Type.
            </summary>
        </member>
        <member name="F:Reactive.Bindings.Notifiers.AsyncMessageBroker.Default">
            <summary>
            AsyncMessageBroker in Global scope.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.AsyncMessageBroker.PublishAsync``1(``0)">
            <summary>
            Send Message to all receiver and await complete.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.AsyncMessageBroker.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribe typed message.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.AsyncMessageBroker.Dispose">
            <summary>
            Stop Pub-Sub system.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.MessageBrokerExtensions">
            <summary>
            Extensions of MessageBroker.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.MessageBrokerExtensions.ToObservable``1(Reactive.Bindings.Notifiers.IMessageSubscriber)">
            <summary>
            Convert IMessageSubscriber.Subscribe to Observable.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.Notifiers.ScheduledNotifier`1">
            <summary>
            Notify value on provided scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.#ctor">
            <summary>
            Use scheduler is Scheduler.Immediate.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Use scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0)">
            <summary>
            Push value to subscribers on provided scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0,System.TimeSpan)">
            <summary>
            Push value to subscribers on provided scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Report(`0,System.DateTimeOffset)">
            <summary>
            Push value to subscribers on provided scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.Notifiers.ScheduledNotifier`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ObservableAsyncHandler`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:System.IObserver`1"/>
            <seealso cref="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion"/>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandler`1.#ctor(System.IObservable{`0},System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ObservableAsyncHandler`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandler`1.AsTask">
            <summary>
            Converts this into a <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandler`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandler`1.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.ObservableAsyncHandler`1.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandler`1.GetResult">
            <summary>
            Gets the result.
            </summary>
            <returns></returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="T:Reactive.Bindings.ObservableAsyncHandlerExtensions">
            <summary>
            Observable Async Handler Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAsyncHandler``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAwaiter``1(Reactive.Bindings.IReactiveProperty{``0})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAwaiter``1(Reactive.Bindings.IReadOnlyReactiveProperty{``0})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAwaiter``1(Reactive.Bindings.ReactiveProperty{``0})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAwaiter``1(Reactive.Bindings.ReactivePropertySlim{``0})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.GetAwaiter``1(Reactive.Bindings.ReactiveCommand{``0})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.WaitUntilValueChangedAsync``1(Reactive.Bindings.IReactiveProperty{``0},System.Threading.CancellationToken)">
            <summary>
            Waits the until value changed asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.WaitUntilValueChangedAsync``1(Reactive.Bindings.IReadOnlyReactiveProperty{``0},System.Threading.CancellationToken)">
            <summary>
            Waits the until value changed asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.WaitUntilValueChangedAsync``1(Reactive.Bindings.ReactiveProperty{``0},System.Threading.CancellationToken)">
            <summary>
            Waits the until value changed asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.WaitUntilValueChangedAsync``1(Reactive.Bindings.ReactivePropertySlim{``0},System.Threading.CancellationToken)">
            <summary>
            Waits the until value changed asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ObservableAsyncHandlerExtensions.WaitUntilValueChangedAsync``1(Reactive.Bindings.ReactiveCommand{``0},System.Threading.CancellationToken)">
            <summary>
            Waits the until value changed asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCollection`1">
            <summary>
            ObservableCollection that operate on scheduler use by ***OnScheduler methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor">
            <summary>
            Operate scheduler is UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Operate scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.IObservable{`0})">
            <summary>
            Source sequence as ObservableCollection. Operate scheduler is UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.#ctor(System.IObservable{`0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddOnScheduler(`0)">
            <summary>
            Add called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddRangeOnScheduler(`0[])">
            <summary>
            Add called on scheduler
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.AddRangeOnScheduler(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add called on scheduler
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.ClearOnScheduler">
            <summary>
            Clear called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.GetOnScheduler(System.Int32)">
            <summary>
            Get(indexer get) called on scheduler, IObservable length is one.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.InsertOnScheduler(System.Int32,`0)">
            <summary>
            Insert called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.MoveOnScheduler(System.Int32,System.Int32)">
            <summary>
            Move called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.RemoveOnScheduler(`0)">
            <summary>
            Remove called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.RemoveAtOnScheduler(System.Int32)">
            <summary>
            RemoveAt called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.SetOnScheduler(System.Int32,`0)">
            <summary>
            Set(indexer set) called on scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollection`1.Dispose">
            <summary>
            Unsubscribe source sequence.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCollectionObservableExtensions">
            <summary>
            Reactive Collection Observable Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0})">
            <summary>
            Source sequence as ObservableCollection. Operate scheduler is ReactivePropertyScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCollectionObservableExtensions.ToReactiveCollection``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Source sequence as ObservableCollection. Operate scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCommand">
            <summary>
            Represents ReactiveCommand&lt;object&gt;
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.Execute">
            <summary>
            Push null to subscribers.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand.Subscribe(System.Action)">
            <summary>
            Subscribe execute.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCommand`1">
            <summary>
            ICommand and IObservable&lt;T&gt; implementation class.
            </summary>
            <typeparam name="T">Type of command argument.</typeparam>
        </member>
        <member name="E:Reactive.Bindings.ReactiveCommand`1.CanExecuteChanged">
            <summary>
            ICommand#CanExecuteChanged
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            CanExecute is always true. When disposed CanExecute change false called on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on ReactivePropertyScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.#ctor(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.CanExecute">
            <summary>
            Return current canExecute status.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Return current canExecute status. parameter is ignored.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Execute(`0)">
            <summary>
            Push parameter to subscribers.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Push parameter to subscribers.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe execute.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommand`1.Dispose">
            <summary>
            Stop all subscription and lock CanExecute is false.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveCommandExtensions">
            <summary>
            ReactiveCommand factory extension methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on UIDispatcherScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.ToReactiveCommand``1(System.IObservable{System.Boolean},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            CanExecuteChanged is called from canExecute sequence on scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.WithSubscribe(Reactive.Bindings.ReactiveCommand,System.Action,System.Action{System.IDisposable})">
            <summary>
            Subscribe execute.
            </summary>
            <param name="self">ReactiveCommand</param>
            <param name="onNext">Action</param>
            <param name="postProcess">Handling of the subscription.</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.WithSubscribe``1(Reactive.Bindings.ReactiveCommand{``0},System.Action{``0},System.Action{System.IDisposable})">
            <summary>
            Subscribe execute.
            </summary>
            <typeparam name="T">ReactiveCommand type argument.</typeparam>
            <param name="self">ReactiveCommand</param>
            <param name="onNext">Action</param>
            <param name="postProcess">Handling of the subscription.</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.WithSubscribe(Reactive.Bindings.ReactiveCommand,System.Action,System.IDisposable@)">
            <summary>
            Subscribe execute.
            </summary>
            <param name="self">ReactiveCommand</param>
            <param name="onNext">Action</param>
            <param name="disposable">The return value of self.Subscribe(onNext)</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveCommandExtensions.WithSubscribe``1(Reactive.Bindings.ReactiveCommand{``0},System.Action{``0},System.IDisposable@)">
            <summary>
            Subscribe execute.
            </summary>
            <typeparam name="T">ReactiveCommand type argument.</typeparam>
            <param name="self">ReactiveCommand</param>
            <param name="onNext">Action</param>
            <param name="disposable">The return value of self.Subscribe(onNext)</param>
            <returns>Same of self argument</returns>
        </member>
        <member name="T:Reactive.Bindings.ReactiveProperty`1">
            <summary>
            Two-way bindable IObservable&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Reactive.Bindings.ReactiveProperty`1.PropertyChanged">
            <summary>
            Implements of INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.RaiseEventScheduler">
            <summary>
            Gets the raise event scheduler.
            </summary>
            <value>The raise event scheduler.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.IsDistinctUntilChanged">
            <summary>
            Gets a value indicating whether this instance is distinct until changed.
            </summary>
            <value><c>true</c> if this instance is distinct until changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.IsRaiseLatestValueOnSubscribe">
            <summary>
            Gets a value indicating whether this instance is raise latest value on subscribe.
            </summary>
            <value>
            <c>true</c> if this instance is raise latest value on subscribe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.IsIgnoreInitialValidationError">
            <summary>
            Gets a value indicating whether this instance is ignore initial validation error.
            </summary>
            <value>
            <c>true</c> if this instance is ignore initial validation error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor">
            <summary>
            PropertyChanged raise on ReactivePropertyScheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            PropertyChanged raise on ReactivePropertyScheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(System.Reactive.Concurrency.IScheduler,`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            PropertyChanged raise on selected scheduler
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(System.IObservable{`0},`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ReactiveProperty`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.#ctor(System.IObservable{`0},System.Reactive.Concurrency.IScheduler,`0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ReactiveProperty`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="raiseEventScheduler">The raise event scheduler.</param>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.Value">
            <summary>
            Get latestValue or push(set) value.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribe source.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.Dispose">
            <summary>
            Unsubscribe all subscription.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.ObserveErrorChanged">
            <summary>
            <para>Checked validation, raised value. If success return value is null.</para>
            </summary>
        </member>
        <member name="E:Reactive.Bindings.ReactiveProperty`1.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{System.IObservable{`0},System.IObservable{System.Collections.IEnumerable}})">
            <summary>
            <para>Set INotifyDataErrorInfo's asynchronous validation, return value is self.</para>
            </summary>
            <param name="validator">If success return IO&lt;null&gt;, failure return IO&lt;IEnumerable&gt;(Errors).</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{System.IObservable{`0},System.IObservable{System.String}})">
            <summary>
            <para>Set INotifyDataErrorInfo's asynchronous validation, return value is self.</para>
            </summary>
            <param name="validator">If success return IO&lt;null&gt;, failure return IO&lt;IEnumerable&gt;(Errors).</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Threading.Tasks.Task{System.Collections.IEnumerable}})">
            <summary>
            Set INotifyDataErrorInfo's asynchronous validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Set INotifyDataErrorInfo's asynchronous validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Set INotifyDataErrorInfo validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.SetValidateNotifyError(System.Func{`0,System.String})">
            <summary>
            Set INotifyDataErrorInfo validation.
            </summary>
            <param name="validator">Validation logic</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.GetErrors(System.String)">
            <summary>
            Get INotifyDataErrorInfo's error store
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.HasErrors">
            <summary>
            Get INotifyDataErrorInfo's error store
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.ForceValidate">
            <summary>
            Invoke validation process.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty`1.ForceNotify">
            <summary>
            Invoke OnNext.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveProperty`1.ObserveHasErrors">
            <summary>
            Observe HasErrors value.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactiveProperty">
            <summary>
            Static methods and extension methods of ReactiveProperty&lt;T&gt;
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -&gt; Object) synchronized.</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -&gt; Object) synchronized.</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -&gt; Object) synchronized.</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.FromObject``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,``2},System.Func{``2,``1},System.Reactive.Concurrency.IScheduler,Reactive.Bindings.ReactivePropertyMode,System.Boolean)">
            <summary>
            <para>Convert plain object to ReactiveProperty.</para>
            <para>Value is OneWayToSource(ReactiveProperty -&gt; Object) synchronized.</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.ToReactiveProperty``1(System.IObservable{``0},``0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on ReactivePropertyScheduler</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveProperty.ToReactiveProperty``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0,Reactive.Bindings.ReactivePropertyMode,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Convert to two-way bindable IObservable&lt;T&gt;</para>
            <para>PropertyChanged raise on selected scheduler</para>
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReactivePropertyExtensions">
            <summary>
            Reactive Property Extensions
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertyExtensions.SetValidateAttribute``1(Reactive.Bindings.ReactiveProperty{``0},System.Linq.Expressions.Expression{System.Func{Reactive.Bindings.ReactiveProperty{``0}}})">
            <summary>
            Set validation logic from DataAnnotations attributes.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="self">Target ReactiveProperty</param>
            <param name="selfSelector">Target property as expression</param>
            <returns>Self</returns>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertyExtensions.ObserveValidationErrorMessage``1(Reactive.Bindings.ReactiveProperty{``0})">
            <summary>
            Create an IObservable instance to observe validation error messages of ReactiveProperty.
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="self">Target ReactiveProperty</param>
        </member>
        <member name="T:Reactive.Bindings.ReactivePropertyScheduler">
            <summary>
            Default ReactiveProperty Scheduler provider.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactivePropertyScheduler.Default">
            <summary>
            Get ReactiveProperty default scheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertyScheduler.SetDefault(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Set default scheduler.
            </summary>
            <param name="defaultScheduler"></param>
        </member>
        <member name="M:Reactive.Bindings.ReactivePropertyScheduler.SetDefaultSchedulerFactory(System.Func{System.Reactive.Concurrency.IScheduler})">
            <summary>
            Set default scheduler factory,
            </summary>
            <param name="schedulerFactory"></param>
        </member>
        <member name="T:Reactive.Bindings.ReactiveTimer">
            <summary>
            Hot(stoppable/continuable) observable timer.
            </summary>
        </member>
        <member name="E:Reactive.Bindings.ReactiveTimer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.#ctor(System.TimeSpan)">
            <summary>
            Operate scheduler ThreadPoolScheduler.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Operate scheduler is argument's scheduler.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveTimer.Interval">
            <summary>
            Timer interval.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReactiveTimer.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
            <value><c>true</c> if this instance is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Start">
            <summary>
            Start timer immediately.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Start(System.TimeSpan)">
            <summary>
            Start timer after dueTime.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Stop">
            <summary>
            Stop timer.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Reset">
            <summary>
            Stop timer and reset count.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Subscribe(System.IObserver{System.Int64})">
            <summary>
            Subscribe observer.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReactiveTimer.Dispose">
            <summary>
            Send OnCompleted to subscribers and unsubscribe all.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveCollection`1">
            <summary>
            ReadOnly ReactiveCollection
            </summary>
            <typeparam name="T">collection item type</typeparam>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.#ctor(System.IObservable{Reactive.Bindings.CollectionChanged{`0}},System.Collections.ObjectModel.ObservableCollection{`0},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Construct RxCollection from CollectionChanged.
            </summary>
            <param name="ox">The ox.</param>
            <param name="source">The source.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.#ctor(System.IObservable{`0},System.Collections.ObjectModel.ObservableCollection{`0},System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Create basic RxCollection from IO.
            </summary>
            <param name="ox">Add</param>
            <param name="source">The source.</param>
            <param name="onReset">Clear</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.Dispose">
            <summary>
            Dispose managed resource.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Reactive.Bindings.CollectionChanged`1">
            <summary>
            CollectionChanged action
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Reset">
            <summary>
            Reset action
            </summary>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.ResetWithSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Reset action with source collection
            </summary>
            <param name="source">An event source collection.</param>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Remove(System.Int32,`0)">
            <summary>
            Create Remove action
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Remove(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create Remove action
            </summary>
            <param name="index">The index.</param>
            <param name="values">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Add(System.Int32,`0)">
            <summary>
            Create add action
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Add(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create add action
            </summary>
            <param name="index"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Replace(System.Int32,`0)">
            <summary>
            Create replace action
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.CollectionChanged`1.Move(System.Int32,System.Int32,`0)">
            <summary>
            Create move action.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Source">
            <summary>
            イベントソースのコレクション
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Values">
            <summary>
            Changed values.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Value">
            <summary>
            Changed value.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Index">
            <summary>
            Changed index.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.OldIndex">
            <summary>
            Changed old index.(Move only)
            </summary>
        </member>
        <member name="P:Reactive.Bindings.CollectionChanged`1.Action">
            <summary>
            Support action is Add and Remove and Reset and Replace.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveCollection">
            <summary>
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Boolean)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.IObservable{``0},System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Create ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="onReset">The on reset.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            convert INotifyCollectionChanged to IO&lt;CollectionChanged&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            convert ObservableCollection to IO&lt;CollectionChanged&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToCollectionChanged``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0})">
            <summary>
            convert ReadOnlyObservableCollection to IO&lt;T&gt;
            </summary>
            <typeparam name="T">source type</typeparam>
            <param name="self">source</param>
            <returns>dest</returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.Generic.IEnumerable{``0},System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Convert IEnumerable to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="collectionChanged">The collection changed.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.Generic.IEnumerable{``0},System.IObservable{Reactive.Bindings.CollectionChanged{``0}},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            Convert IEnumerable to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self">The self.</param>
            <param name="collectionChanged">The collection changed.</param>
            <param name="converter">The converter.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            convert ObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            convert ObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self">The self.</param>
            <param name="converter">The converter.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``1(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            convert ReadOnlyObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveCollection.ToReadOnlyReactiveCollection``2(System.Collections.ObjectModel.ReadOnlyObservableCollection{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler,System.Boolean)">
            <summary>
            convert ReadOnlyObservableCollection to ReadOnlyReactiveCollection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="self">The self.</param>
            <param name="converter">The converter.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="disposeElement">if set to <c>true</c> [dispose element].</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveProperty`1">
            <summary>
            Read only version ReactiveProperty.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
        </member>
        <member name="E:Reactive.Bindings.ReadOnlyReactiveProperty`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveProperty`1.#ctor(System.IObservable{`0},`0,Reactive.Bindings.ReactivePropertyMode,System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Reactive.Bindings.ReadOnlyReactiveProperty`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialValue">The initial value.</param>
            <param name="mode">The mode.</param>
            <param name="eventScheduler">The event scheduler.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="P:Reactive.Bindings.ReadOnlyReactiveProperty`1.Value">
            <summary>
            Get latest value.
            </summary>
        </member>
        <member name="P:Reactive.Bindings.ReadOnlyReactiveProperty`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveProperty`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>
            A reference to an interface that allows observers to stop receiving notifications before
            the provider has finished sending them.
            </returns>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveProperty`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Reactive.Bindings.ReadOnlyReactiveProperty">
            <summary>
            ReadOnlyReactiveProperty factory methods.
            </summary>
        </member>
        <member name="M:Reactive.Bindings.ReadOnlyReactiveProperty.ToReadOnlyReactiveProperty``1(System.IObservable{``0},``0,Reactive.Bindings.ReactivePropertyMode,System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create ReadOnlyReactiveProperty
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="self">source stream</param>
            <param name="initialValue">initial push value</param>
            <param name="mode">ReactivePropertyMode. Default is DistinctUntilChanged | RaiseLatestValueOnSubscribe</param>
            <param name="eventScheduler">Scheduler of PropertyChanged event.</param>
            <param name="equalityComparer">The equality comparer.</param>
            <returns></returns>
        </member>
        <member name="T:Reactive.Bindings.UIDispatcherScheduler">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDispatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="P:Reactive.Bindings.UIDispatcherScheduler.Default">
            <summary>
            <para>If call Schedule on UIThread then schedule immediately else dispatch BeginInvoke.</para>
            <para>UIDispatcherScheduler is created when access to UIDispatcher.Default first in the whole application.</para>
            <para>If you want to explicitly initialize, call UIDispatcherScheduler.Initialize() in App.xaml.cs.</para>
            </summary>
        </member>
        <member name="M:Reactive.Bindings.UIDispatcherScheduler.Initialize">
            <summary>
            Create UIDispatcherSchedule on called thread if is not initialized yet.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            For init property
            </summary>
        </member>
    </members>
</doc>
