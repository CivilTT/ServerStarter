【MainWindow.xaml.cs】
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;

using System.Text.Json;

//メモ
//launcherに表示されるバージョン名一覧の取得方法は.minecraft\versions\version_manifest_v2.jsonに一覧として保管されている
//バージョンに対応するserver.jarをダウンロードするURLは、jsonファイル内の対応するバージョンのURLにアクセスすると新しくjsonファイルが検索され、その検索されたもののdownloads>server>urlに格納されている

namespace Server_GUI2
{
    public partial class Data
    {
        public string latest { get; set; }
        public string versions { get; set; }
    }


    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : Window
    {
        //配布時にはここを".\"に変更する
        public const string Data_Path = @"C:\Users\T.Tojo\AppData\Roaming\.minecraft\Server";
        //public const string Data_Path = @".";

        //インスタンス変数を宣言
        public static List<string> info = new List<string>();
        public static List<string> info_index = new List<string>();
        public static bool git_pause = false;
        private readonly Functions func = new Functions();
        private static bool reset_world = false;

        //More_SettingsからMainWindowをShowするために必要
        private static MainWindow _Instance;
        public static MainWindow GetInstance()
        {
            if (_Instance == null)
            {
                _Instance = new MainWindow();
            }
            return _Instance;
        }


        public MainWindow()
        {
            InitializeComponent();

            DataContext = new DataSource();

            func.Build_info();

            //string jsonStr = ReadAllLine($@"{Data_Path}\..\versions\version_manifest_v2.json", "utf-8");

            //Data jsonData = new Data();
            //jsonData = JsonSerializer.Deserialize<Data>(jsonStr);

            //Console.WriteLine(jsonData.versions[0]);

            //info.txtの読み取り
            using (StreamReader sr = new StreamReader($@"{Data_Path}\info.txt", Encoding.GetEncoding("Shift_JIS")))
            {
                List<List<string>> info_zip = func.Add_info(sr);
                info = info_zip[0];
                info_index = info_zip[1];
            }

            //右上の仕様の変更
            name.Text = info[0];
            info_version.Text = info[1];

            //Versionの選択
            Version = func.Init_version(Version, info[2]);
            if (Version.Text == "【new Version】")
            {
                version_main.Visibility = Visibility.Hidden;
                version_hide.Visibility = Visibility.Visible;
                Version2.SelectedIndex = Version2.Items.IndexOf("【new Version】");
            }

            //Worldの選択
            World = func.Init_world(World, info[2], info[3]);
        }

        private string ReadAllLine(string filePath, string encodingName)
        {
            StreamReader sr = new StreamReader(filePath, Encoding.GetEncoding(encodingName));
            string allLine = sr.ReadToEnd();
            sr.Close();



            Console.WriteLine(allLine);

            return allLine;
        }

        public void Start(bool from_Settings)
        {
            Functions start_func = new Functions();
            string Open_version = Version.Text;
            string Open_world = start_func.Define_OpenWorld(World, World2, input_box_world);
            Open_world = start_func.Check_copy_world(Open_version, Open_world);
            bool new_version = false;


            //バージョンについて分岐
            if (Version2.Text == "【new Version】")
            {
                start_func.Import_server(input_box_version.Text);
                Open_version = input_box_version.Text;
                new_version = true;
            }
            else if (Open_version != info[2])
            {
                //Open_world=ShareWorldの時のみ異なるバージョンが指定された場合、初めに確認
                start_func.Alert_version(Open_version, Open_world);

                //infoのVersionを書き換え
                start_func.Change_info(info, Open_version);
            }

            //新バージョン導入時は必ずpropertiesの書き換えが入るため、バージョンの分岐とは関係なく設置
            if (Open_world != info[3] || new_version || from_Settings)
            {
                start_func.Wirte_properties(Open_version, Open_world, new_version);
            }

            //ShareWorldの存在確認や起動済みのサーバーがないかなどを確認
            List<string> info2 = start_func.Check_ShareWorld(Open_version, Open_world);

            start_func.Reset_world_method(reset_world, Open_version, Open_world);

            start_func.Start_server(Open_version);

            start_func.Upload_ShareWorld(Open_version, Open_world, info2);

            //GUIの終了
            System.Windows.Application.Current.Shutdown();
        }

        private void START_Click(object sender, RoutedEventArgs e)
        {
            //MAINを閉じる
            Close();
            Start(false);
        }

        private void More_Settings_Click(object sender, RoutedEventArgs e)
        {
            var window = new More_Settings(Version.Text);
            Hide();
            bool? res = window.ShowDialog();
            if (res == true)
            {
                Start(true);
            }
            else
            {
                Show();
            }
        }

        private void Close_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Application.Current.Shutdown();
        }

        private void World_reload(object sender, EventArgs e)
        {
            World.Items.Clear();
            World = func.New_Version_worlds(World);
            World.SelectedIndex = World.Items.IndexOf("ShareWorld");

            if (Version.Text == "【new Version】" || Version2.Text == "【new Version】")
            {
                version_hide.Visibility = Visibility.Visible;
                Version2.SelectedIndex = Version2.Items.IndexOf("【new Version】");
                //new Versionでないほうの表示項目は仮置きしておき、選択された際に決定する
                Version.SelectedIndex = -1;
                version_main.Visibility = Visibility.Hidden;
            }

            if (world_hide.Visibility == Visibility.Visible)
            {
                World2.SelectedIndex = World2.Items.IndexOf("【new World】");
            }
        }

        private void Not_pause_Checked(object sender, RoutedEventArgs e)
        {
            if (git_pause)
            {
                git_pause = false;
            }
            else
            {
                git_pause = true;
            }
        }

        private void Name_reload(object sender, EventArgs e)
        {
            if (World.Text == "【new World】")
            {
                if (Version2.Text != "【new Version】")
                {
                    More_Settings_button.Visibility = Visibility.Visible;
                }
                world_hide.Visibility = Visibility.Visible;
                World2.SelectedIndex = World2.Items.IndexOf("【new World】");
                //new Worldでないほうの表示項目は仮置きしておき、選択された際に決定する
                World.SelectedIndex = -1;
                world_main.Visibility = Visibility.Hidden;
            }
            else if (World2.Text != "【new World】")
            {
                More_Settings_button.Visibility = Visibility.Hidden;
                world_hide.Visibility = Visibility.Hidden;
                world_main.Visibility = Visibility.Visible;
                //new Worldを介した操作に限定
                if (World.SelectedIndex == -1)
                {
                    //仮置きの内容をWorld2で選択されたものに決定
                    World.SelectedIndex = World.Items.IndexOf(World2.Text);
                }
            }
        }

        private void Reset_world(object sender, RoutedEventArgs e)
        {
            if (reset_world)
            {
                reset_world = false;
            }
            else
            {
                reset_world = true;
            }
        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public partial class Functions : Window
    {
        private readonly string Data_Path = MainWindow.Data_Path;
        private readonly List<string> info = MainWindow.info;
        private readonly List<string> info_index = MainWindow.info_index;
        private readonly bool git_pause = MainWindow.git_pause;

        public void Build_info()
        {
            //本来あるべきinfoの行数
            int all_line_num = 7;

            //ファイルが存在し、かつ、ファイルの行数が正しいときはbuildしない
            if (File.Exists($@"{Data_Path}\info.txt"))
            {
                string[] lines = File.ReadAllLines($@"{Data_Path}\info.txt");
                if (lines.Length == all_line_num)
                {
                    return;
                }
            }

            var window = new info_builder();
            bool? res = window.ShowDialog();
            if (res == false)
            {
                //強制終了
                Environment.Exit(0);
            }

        }

        private void Forece_close(object sender, EventArgs e)
        {
            Close();
        }

        public System.Windows.Controls.ComboBox Init_version(System.Windows.Controls.ComboBox Version, string version_name)
        {
            string[] subFolders = Directory.GetDirectories(
                $@"{Data_Path}\", "*", SearchOption.TopDirectoryOnly);
            for (int i = 0; i < subFolders.Length; ++i)
            {
                string subfolder = Path.GetFileName(subFolders[i]);
                Version.Items.Add(subfolder);
            }
            Version.Items.Add("【new Version】");
            Version = Check_index(Version, version_name);
            return Version;
        }

        public System.Windows.Controls.ComboBox Init_world(System.Windows.Controls.ComboBox World, string read_version, string index_name)
        {
            //以前開いたバージョンが存在しない場合の処理
            if (!(Directory.Exists($@"{Data_Path}\{read_version}")))
            {
                string[] subFolders = Directory.GetDirectories(
                    $@"{Data_Path}\", "*", SearchOption.TopDirectoryOnly);
                read_version = Path.GetFileName(subFolders[0]);
            }

            string[] Worlds = Directory.GetDirectories(
                $@"{Data_Path}\{read_version}", "*", SearchOption.TopDirectoryOnly);
            for (int i = 0; i < Worlds.Length; i++)
            {
                string World_name = Path.GetFileName(Worlds[i]);
                World.Items.Add(World_name);
            }
            World.Items.Remove("logs");
            World = Add_SW(World);
            World.Items.Add("【new World】");
            World = Check_index(World, index_name);
            return World;
        }

        private System.Windows.Controls.ComboBox Check_index(System.Windows.Controls.ComboBox world_version, string index_name)
        {
            int index_num = world_version.Items.IndexOf(index_name);
            //index_nameに該当するワールド名(バージョン名)が登録されていない場合に-1を返されるため、0番目のcombo_boxのワールド名(バージョン名)を返す
            if (index_num == -1)
            {
                index_num = 0;
            }
            world_version.SelectedIndex = index_num;

            return world_version;
        }

        private System.Windows.Controls.ComboBox Add_SW(System.Windows.Controls.ComboBox world)
        {
            //WorldのリストにShareWorldがない場合、追加する
            if (world.Items.IndexOf("ShareWorld") == -1)
            {
                world.Items.Add("ShareWorld");
            }

            return world;
        }

        public string Define_OpenWorld(System.Windows.Controls.ComboBox world, System.Windows.Controls.ComboBox world2, System.Windows.Controls.TextBox input_box_world)
        {
            string Open_world = world.Text;
            if (world2.Text == "【new World】")
            {
                Open_world = input_box_world.Text;
            }
            return Open_world;
        }

        public void Git_pull(string version)
        {
            System.Diagnostics.Process p;
            if (git_pause)
            {
                p = System.Diagnostics.Process.Start($@"{Data_Path}\{version}\ShareWorld\pull.bat");
            }
            else
            {
                p = System.Diagnostics.Process.Start($@"{Data_Path}\{version}\ShareWorld\pull_NOTpause.bat");
            }
            p.WaitForExit();
        }

        public void Git_push(string version)
        {
            System.Diagnostics.Process p;
            if (git_pause)
            {
                p = System.Diagnostics.Process.Start($@"{Data_Path}\{version}\ShareWorld\push.bat");
            }
            else
            {
                p = System.Diagnostics.Process.Start($@"{Data_Path}\{version}\ShareWorld\push_NOTpause.bat");
            }
            p.WaitForExit();
        }

        public void Git_copy(string version)
        {
            string latest_version = Serch_latest_SW_version();

            //最新のShareWorldフォルダの中身をコピー
            Process p = Process.Start("xcopy", $@"{Data_Path}\{latest_version}\ShareWorld {Data_Path}\{version}\ShareWorld /E /H");
            p.WaitForExit();
        }

        private string Serch_latest_SW_version()
        {
            List<float> SW_version = new List<float>();

            //Versionをforで回す
            string[] subFolders = Directory.GetDirectories(
                $@"{Data_Path}\", "*", SearchOption.TopDirectoryOnly);
            for (int i = 0; i < subFolders.Length; ++i)
            {
                string subfolder = Path.GetFileName(subFolders[i]);

                //各Version内のWorldをforで回す
                string[] Worlds = Directory.GetDirectories(
                    $@"{Data_Path}\{subfolder}", "*", SearchOption.TopDirectoryOnly);
                for (int j = 0; j < Worlds.Length; j++)
                {
                    string World_name = Path.GetFileName(Worlds[j]);
                    if (World_name == "ShareWorld")
                    {
                        //万一、バージョン名が1.16.4のようになっていなかった場合でも処理が止まらないようにする
                        try
                        {
                            SW_version.Add(float.Parse(subfolder.Substring(2)));
                        }
                        catch
                        {
                            //何もしない
                        }
                    }
                }
            }

            //SW_versionの中で最も大きい数字を抜き出す
            float max = 0;
            foreach (float ver in SW_version)
            {
                if (max < ver)
                {
                    max = ver;
                }
            }
            string latest_version = max.ToString();
            return "1." + latest_version;
        }

        public List<List<string>> Add_info(StreamReader sr)
        {
            string line;
            List<string> tmp_info = new List<string>();
            List<string> tmp_info_index = new List<string>();

            while ((line = sr.ReadLine()) != null)
            {
                //＞が入っていない行ははじく
                if (line.IndexOf(">") == -1)
                {
                    continue;
                }

                //-＞の前後をリストとして登録している
                tmp_info.Add(line.Substring(line.IndexOf("->") + 2));
                tmp_info_index.Add(line.Substring(0, line.IndexOf("->")));
            }
            List<List<string>> info_zip = new List<List<string>>() { tmp_info, tmp_info_index };

            return info_zip;
        }

        public void Check_file_directory_SW(string version)
        {
            //ShareWorldフォルダが存在しない場合は作成する
            if (!(Directory.Exists($@"{Data_Path}\{version}\ShareWorld")))
            {
                Directory.CreateDirectory($@"{Data_Path}\{version}\ShareWorld");
            }

            //batファイルが存在しない場合は作成する
            if (!(File.Exists($@"{Data_Path}\{version}\ShareWorld\pull.bat")))
            {
                Create_bat_pull(version);
            }
            if (!(File.Exists($@"{Data_Path}\{version}\ShareWorld\push.bat")))
            {
                Create_bat_push(version);
            }
        }

        private void Create_bat_start(string version)
        {
            List<string> start = new List<string>
            {
                "@echo off",
                "cd %~dp0",
                "java -Xmx5G -Xms5G -jar server.jar nogui"
            };
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\start.bat", false))
            {
                foreach (string line in start)
                {
                    writer.WriteLine(line);
                }
            }
        }

        private void Create_bat_push(string version)
        {
            List<string> push = new List<string>
            {
                "@echo off",
                "git config --global user.name %info[6]%",
                "git config --global user.email %info[7]%",
                "for /f \"tokens=1,3 delims=>\" %%a in (%~dp0\\..\\..\\info.txt) do (set info[%%a]=%%b)",
                "git -C %~dp0 add -A",
                "git -C %~dp0 commit -m \"%info[1]%\"",
                "git -C %~dp0 push",
                "pause"
            };
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\ShareWorld\push.bat", false))
            {
                foreach (string line in push)
                {
                    writer.WriteLine(line);
                }
            }
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\ShareWorld\push_NOTpause.bat", false))
            {
                for (int i = 0; i < push.Count - 1; i++)
                {
                    writer.WriteLine(push[i]);
                }
            }
        }

        private void Create_bat_pull(string version)
        {
            List<string> pull = new List<string>
            {
                "@echo off",
                "for /f \"tokens=1,3 delims=>\" %%a in (%~dp0\\..\\..\\info.txt) do (set info[%%a]=%%b)",
                "git config --global user.name %info[6]%",
                "git config --global user.email %info[7]%",
                "git -C %~dp0 pull",
                "pause"
            };
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\ShareWorld\pull.bat", false))
            {
                foreach (string line in pull)
                {
                    writer.WriteLine(line);
                }
            }
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\ShareWorld\pull_NOTpause.bat", false))
            {
                for (int i = 0; i < pull.Count - 1; i++)
                {
                    writer.WriteLine(pull[i]);
                }
            }
        }

        private void Bat_versionUP(string open_version)
        {
            List<string> versionUP = new List<string>();
            string self_path = Assembly.GetEntryAssembly().Location;
            string self_name = Path.GetFileNameWithoutExtension(self_path);
            string[] new_starter_path = Directory.GetFileSystemEntries($@"{Data_Path}\{open_version}\ShareWorld\Server_bat-files", "*.exe");
            versionUP.Add("@echo off");
            versionUP.Add($@"taskkill /IM {self_name}.exe /F");
            versionUP.Add("timeout /t 1");
            versionUP.Add($@"del {self_path}");
            versionUP.Add($@"copy /y {new_starter_path[0]} {Data_Path}\");
            //versionUP.Add("pause");
            //自分自身を削除する
            versionUP.Add("del /f \"%~dp0%~nx0\"");
            using (var writer = new StreamWriter($@"{Data_Path}\tmp.bat", false))
            {
                foreach (string line in versionUP)
                {
                    writer.WriteLine(line);
                }
            }
            Process p = Process.Start($@"{Data_Path}\tmp.bat");
            p.WaitForExit();
        }

        public void Change_info(List<string> info2, string True_False, string version)
        {
            //server_openの項目についてFalseをTrueに書き換え
            info2[4] = True_False;

            //Server_bat_files\info.txtを書き換え(0番はプレイヤー名のため、元のinfoを参照する)
            using (var writer = new StreamWriter($@"{Data_Path}\{version}\ShareWorld\Server_bat-files\info.txt", false))
            {
                writer.WriteLine($"{info_index[0]}->{info[0]}");
                for (int a = 1; a < info2.Count; a++)
                {
                    writer.WriteLine($"{info_index[a]}->{info2[a]}");
                }
            }
        }

        private void Change_info(string combo_World)
        {
            //The latest Minecraft World nameの項目について書き換え
            info[3] = combo_World;

            //Server\info.txtを書き換え
            using (var writer = new StreamWriter($@"{Data_Path}\info.txt", false))
            {
                for (int a = 0; a < info.Count; a++)
                {
                    writer.WriteLine($"{info_index[a]}->{info[a]}");
                }
            }
        }

        public void Change_info(List<string> info, string version)
        {
            //The latest Minecraft Versionの項目について書き換え
            info[2] = version;

            //Server\info.txtを書き換え
            using (var writer = new StreamWriter($@"{Data_Path}\info.txt", false))
            {
                for (int a = 0; a < info.Count; a++)
                {
                    writer.WriteLine($"{info_index[a]}->{info[a]}");
                }
            }

        }

        private void Change_info(List<string> info2)
        {
            //Server_Starterのバージョンの項目について書き換え
            info[1] = info2[1];

            //Server\info.txtを書き換え
            using (var writer = new StreamWriter($@"{Data_Path}\info.txt", false))
            {
                for (int a = 0; a < info.Count; a++)
                {
                    writer.WriteLine($"{info_index[a]}->{info[a]}");
                }
            }
        }

        public void Import_server(string input_version)
        {
            string new_version = input_version;

            //新バージョンを追加する際の処理
            System.Windows.MessageBox.Show("追加するバージョンのserver.jarをMinecraftのLauncherよりダウンロードしてください。\r\nダウンロードしたjarファイルをダウンロードフォルダに放置してOKを押してください。", "Server Starter", MessageBoxButton.OK, MessageBoxImage.Information);

            //当該フォルダにserver.jarを移動
            string download_path = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            download_path = download_path.Replace("Documents", "Downloads");
            Directory.CreateDirectory($@"{Data_Path}\{new_version}");
            File.Move($@"{download_path}\server.jar", $@"{Data_Path}\{new_version}\server.jar");

            //一度実行し、eula.txtなどの必要ファイルを書き出す
            Start_server(new_version);

            //eulaの書き換え
            Change_eula(new_version);

        }

        internal string Check_copy_world(string open_version, string open_world)
        {
            if (open_world.Contains("/"))
            {
                string copy_version = open_world.Substring(0, open_world.IndexOf("/"));
                string copy_world = open_world.Substring(open_world.IndexOf("/") + 1);

                //ワールドデータをコピー
                Process p = Process.Start("xcopy", $@"{Data_Path}\{copy_version}\{copy_world} {Data_Path}\{open_version}\{copy_world} /E /H /I");
                p.WaitForExit();

                //open_worldをワールド名単体に直す
                open_world = copy_world;
            }
            return open_world;
        }

        public void Check_server_open(List<string> info2, string version)
        {
            if (info2[4] == "True")
            {
                System.Windows.MessageBox.Show("ShareWorldのサーバーはすでにほかのサーバー管理者によって起動されています。\r\nほかのサーバーが閉じたことを確認したうえでサーバーを再起動してください。", "Server Starter", MessageBoxButton.OK, MessageBoxImage.Error);
                System.Windows.Application.Current.Shutdown();
            }
            else
            {
                Change_info(info2, "True", version);

                //変更内容をpush
                Git_push(version);
            }
        }

        public void Wirte_properties(string open_version, string open_world, bool new_version)
        {
            //level-nameの書き換え（変更があった場合のみ行えばよい？）
            Dictionary<string, string> properties = More_Settings.properties;
            if (new_version)
            {
                //propertiesを該当バージョンのserver.propertiesに変更
                properties = Write_new_properties(open_version);
            }

            properties["level-name"] = open_world;
            Change_info(open_world);

            //propertiesを該当バージョンのserver.propertiesに書き込む
            using (var writer = new StreamWriter($@"{Data_Path}\{open_version}\server.properties", false))
            {
                foreach (string key in properties.Keys)
                {
                    if (key.Contains("#"))
                    {
                        writer.WriteLine(key);
                    }
                    else
                    {
                        writer.WriteLine($"{key}={properties[key]}");
                    }
                }
            }
        }

        private Dictionary<string, string> Write_new_properties(string open_version)
        {
            //旧バージョンのpropertiesで設定した内容をそのまま受け継ぎ、その項目が新バージョンでは存在しない場合はMessageBoxで知らせる
            //↑【new Version】ではMore_Settingsが選択できないようにすることで解決

            Dictionary<string, string> new_properties;
            using (StreamReader sr = new StreamReader($@"{MainWindow.Data_Path}\{open_version}\server.properties", Encoding.GetEncoding("Shift_JIS")))
            {
                More_Settings tmp_window = new More_Settings(open_version);
                new_properties = tmp_window.add_settings(sr);
            }
            return new_properties;
        }

        public void Alert_version(string version, string world)
        {
            //ShareWorld出ないときは警告を出さない
            if (world != "ShareWorld")
            {
                return;
            }
            //起動バージョンが前回と違う場合は警告を出す
            if (info[2] != version)
            {
                DialogResult result = System.Windows.Forms.MessageBox.Show($"前回のサーバー起動バージョンは{info[2]}です。\r\nバージョン{version}で起動を続けますか？\r\n（「いいえ(N)」を選択した場合はもう一度起動をやり直してください。）", "Server Starter", System.Windows.Forms.MessageBoxButtons.YesNo, System.Windows.Forms.MessageBoxIcon.Warning, System.Windows.Forms.MessageBoxDefaultButton.Button2);
                if (result == System.Windows.Forms.DialogResult.No)
                {
                    System.Windows.Application.Current.Shutdown();
                    Close();
                }
            }
        }

        public void Change_eula(string new_version)
        {
            //eula.txtの読み取り
            string line;
            List<string> eula_lines = new List<string>();
            using (StreamReader sr = new StreamReader($@"{Data_Path}\{new_version}\eula.txt", Encoding.GetEncoding("Shift_JIS")))
            {
                while ((line = sr.ReadLine()) != "eula=false")
                {
                    eula_lines.Add(line);
                }
            }
            eula_lines.Add("eula=true");

            //書き込み
            using (var writer = new StreamWriter($@"{MainWindow.Data_Path}\{new_version}\eula.txt", false))
            {
                foreach (string key in eula_lines)
                {
                    writer.WriteLine(key);
                }
            }

        }

        public List<string> Check_ShareWorld(string version, string world)
        {
            if (world != "ShareWorld")
            {
                List<string> dummy = new List<string>();
                return dummy;
            }

            //ShareWorldの処理に必要なbatが存在するか否かを確認
            Check_file_directory_SW(version);

            List<string> info2 = Download_ShareWorld(version);

            //起動済みサーバーがあるか否かの確認
            //Server_bat-files\info.txtの中身にてserver_openの項目がTrueであれば起動を中止し、FalseならばTrueに書き換えたうえで起動前にpushを行う
            Check_server_open(info2, version);

            return info2;
        }

        private List<string> Download_ShareWorld(string version)
        {
            List<string> info2 = new List<string>();
            //pull＆new_versionの場合は導入済みの中で最新のShareWorldのバージョンからコピー
            if (!(File.Exists($@"{Data_Path}\{version}\ShareWorld")))
            {
                Git_copy(version);
            }
            Git_pull(version);

            //Server_bat-files内のinfo.txtの中身を読み取る(ShareWorld起動時のみ使用するためここに記載している)
            using (StreamReader sr = new StreamReader($@"{Data_Path}\{version}\ShareWorld\Server_bat-files\info.txt", Encoding.GetEncoding("Shift_JIS")))
            {
                List<List<string>> info2_zip = Add_info(sr);
                info2 = info2_zip[0];
            }

            return info2;
        }

        public void Reset_world_method(bool reset_world, string version, string world)
        {
            if (!(reset_world))
            {
                return;
            }

            Delete_folders(version, world);
            Delete_files(version, world);
        }

        private void Delete_folders(string version, string world)
        {
            //フォルダの削除
            //worldデータ内の全フォルダを取得し、stay_foldersを残す
            List<string> stay_folders = new List<string>() { ".git", "Server_bat-files" };
            string[] Folders = Directory.GetDirectories(
                $@"{Data_Path}\{version}\{world}", "*", SearchOption.TopDirectoryOnly);
            foreach (string name in Folders)
            {
                string rename = Path.GetFileName(name);
                if (stay_folders.Contains(rename))
                {
                    continue;
                }
                Directory.Delete($@"{Data_Path}\{version}\{world}\{rename}", true);
            }
        }

        private void Delete_files(string version, string world)
        {
            //ファイルの削除
            string[] tmp_stay_files = Directory.GetFiles(
                $@"{Data_Path}\{version}\{world}", "*.bat", SearchOption.TopDirectoryOnly);
            List<string> stay_files = new List<string>(tmp_stay_files);
            string[] Files = Directory.GetFiles(
                $@"{Data_Path}\{version}\{world}", "*", SearchOption.TopDirectoryOnly);
            foreach (string name in Files)
            {
                if (stay_files.Contains(name))
                {
                    continue;
                }
                File.Delete(name);
            }
        }

        public void Start_server(string version)
        {
            //server.jarの起動に必要なstart.batを作成
            Create_bat_start(version);

            Process p = Process.Start($@"{Data_Path}\{version}\start.bat");
            p.WaitForExit();
        }

        public void Upload_ShareWorld(string open_version, string open_world, List<string> info2)
        {
            if (open_world == "ShareWorld")
            {
                //info.txtのなかのserver_openをFalseに戻す
                Change_info(info2, "False", open_version);

                //push
                Git_push(open_version);

                Check_versionUP(open_version, info2);
            }
        }

        private void Check_versionUP(string open_version, List<string> info2)
        {
            if (info[1] != info2[1])
            {
                //Server Starterのバージョンを書き直し
                Change_info(info2);

                //.exeをアップデート
                Bat_versionUP(open_version);
            }
        }

        public System.Windows.Controls.ComboBox New_Version_worlds(System.Windows.Controls.ComboBox World)
        {
            //Versionをforで回す
            string[] subFolders = Directory.GetDirectories(
                $@"{Data_Path}\", "*", SearchOption.TopDirectoryOnly);
            for (int i = 0; i < subFolders.Length; ++i)
            {
                string subfolder = Path.GetFileName(subFolders[i]);

                //各Version内のWorldをforで回す
                string[] Worlds = Directory.GetDirectories(
                    $@"{Data_Path}\{subfolder}", "*", SearchOption.TopDirectoryOnly);
                for (int j = 0; j < Worlds.Length; j++)
                {
                    string World_name = Path.GetFileName(Worlds[j]);
                    //ShareWorldはクローンで導入するため、既存ワールドとして扱わない
                    if (World_name != "ShareWorld" && World_name != "logs")
                    {
                        World.Items.Add($"{subfolder}/{World_name}");
                    }
                }
            }
            World = Add_SW(World);
            World.Items.Add("【new World】");
            World.SelectedIndex = 0;
            return World;
        }

    }

    class DataSource : IDataErrorInfo
    {
        //IDはDataContexのプロパティ
        public String ID { get; set; }

        // 今回は使わないが、IDataErrorInfoインターフェースでは実装しなければならない
        public string Error { get { return null; } }

        // これも実装必須のプロパティで、各プロパティに対応するエラーメッセージを返す
        public string this[string propertyName]
        {
            get
            {
                string result = null;

                switch (propertyName)
                {
                    case "ID":
                        if (!Regex.IsMatch(ID, @"[1-9]\.[0-9]+\.[0-9]+") && !Regex.IsMatch(ID, "[0-9]+(?i)[A-Z][0-9]+(?i)[A-Z]"))
                        {
                            result = "Please enter the Version as 1.16.5 or 21w10a";
                            break;
                        }
                        break;
                }
                return result;
            }

        }


    }

}


【More_Settings.xaml.cs】
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows;

namespace Server_GUI2
{
    /// <summary>
    /// More_Settings.xaml の相互作用ロジック
    /// </summary>
    public partial class More_Settings : Window
    {
        public static Dictionary<string, string> properties = new Dictionary<string, string>();

        public More_Settings(string read_vesion)
        {
            InitializeComponent();

            //read_properties
            //Worldのバージョンを渡してパスを書き直す
            using (StreamReader sr = new StreamReader($@"{MainWindow.Data_Path}\{read_vesion}\server.properties", Encoding.GetEncoding("Shift_JIS")))
            {
                properties = add_settings(sr);

                //【デバッグ】
                string moji = "";
                //Dictionaryをまわす
                foreach (string key in properties.Keys)
                {
                    moji = moji + "key=" + key + ",val=" + properties[key] + "  ";
                }
                //結果をコンソールに出力する
                Console.WriteLine("propertiesの中身は「{0}」です。", moji);

            }

            set_value(properties);
        }

        public Dictionary<string, string> add_settings(StreamReader sr)
        {
            //インスタンス変数としてproperties_constを宣言し、読み取ることでMoreSettingsが複数回呼び出されても表示内容を更新できるようにする
            Dictionary<string, string> properties_const = new Dictionary<string, string>();
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                //冒頭2行は＝が入っていないため、そのまま登録
                if (line.IndexOf("=") == -1)
                {
                    properties_const.Add(line.Substring(0), "");
                    continue;
                }

                //" = "の前後を辞書として登録している(項目に値が登録されていなかった場合、例外処理を行う)
                try
                {
                    properties_const.Add(line.Substring(0, line.IndexOf("=")), line.Substring(line.IndexOf("=") + 1));
                }
                catch (ArgumentOutOfRangeException)
                {
                    properties_const.Add(line.Substring(0, line.IndexOf("=")), "");
                }
            }
            return properties_const;
        }

        private void set_value(Dictionary<string, string> properties)
        {
            string[] difficulty_list = new string[] { "easy", "normal", "hard", "peaceful" };
            string[] gamemode_list = new string[] { "adventure", "criative", "spectator", "survival" };
            string[] true_false_list = new string[] { "true", "false" };
            //other_settingsのリストを作る
            List<string> other_settings_TF_1 = new List<string>();
            List<string> other_settings_last_1 = new List<string>();
            foreach (string key in properties.Keys)
            {
                if (key == "level-name" || key == "difficulty" || key == "gamemode" || key == "hardcore" || key == "force-gamemode" || key == "level-seed" || key == "white-list" || key == "enforce-whitelist" || key.Contains("#"))
                {
                    continue;
                }
                if (properties[key] == "true" || properties[key] == "false")
                {
                    other_settings_TF_1.Add(key);
                }
                else
                {
                    other_settings_last_1.Add(key);
                }
            }
            //型を合わせるための処理
            string[] other_settings_TF = new string[other_settings_TF_1.Count];
            string[] other_settings_last = new string[other_settings_last_1.Count];
            for (int i = 0; i < other_settings_TF_1.Count; i++)
            {
                other_settings_TF[i] = other_settings_TF_1[i];
            }
            for (int i = 0; i < other_settings_last_1.Count; i++)
            {
                other_settings_last[i] = other_settings_last_1[i];
            }

            //MAIN Settings
            register_combo(difficulty, difficulty_list, properties["difficulty"]);
            register_combo(hardcore, true_false_list, properties["hardcore"]);
            register_combo(gamemode, gamemode_list, properties["gamemode"]);
            register_combo(force_gamemode, true_false_list, properties["force-gamemode"]);
            level_seed.Text = properties["level-seed"];
            register_combo(white_list, true_false_list, properties["white-list"]);
            register_combo(enforce_white_list, true_false_list, properties["enforce-whitelist"]);

            //OTHER Settings
            register_combo(true_false, other_settings_TF, other_settings_TF[0]);
            register_combo(true_false_combo, true_false_list, properties[other_settings_TF[0]]);
            register_combo(input_text, other_settings_last, other_settings_last[0]);
            input_text_txt.Text = properties[other_settings_last[0]];

        }

        private void register_combo(System.Windows.Controls.ComboBox name_combo, string[] index_list, object IndexOf)
        {
            foreach (string list in index_list)
            {
                name_combo.Items.Add(list);
            }
            name_combo.SelectedIndex = name_combo.Items.IndexOf(IndexOf);
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            //変数の破棄（これにより再度More_Settingsを開いても変数被りのエラーを回避する）
            properties = null;
            DialogResult = false;
        }

        private void OK_Click(object sender, RoutedEventArgs e)
        {
            //startを呼び出す
            DialogResult = true;
        }

        private void TF_reload(object sender, EventArgs e)
        {
            true_false_combo.SelectedIndex = true_false_combo.Items.IndexOf(properties[true_false.Text]);
        }

        private void IT_reload(object sender, EventArgs e)
        {
            input_text_txt.Text = properties[input_text.Text];
        }

        private void difficulty_CB(object sender, EventArgs e)
        {
            properties["difficulty"] = difficulty.Text;
        }

        private void hardcore_CB(object sender, EventArgs e)
        {
            properties["hardcore"] = hardcore.Text;
        }

        private void gamemode_CB(object sender, EventArgs e)
        {
            properties["gamemode"] = gamemode.Text;
        }

        private void force_gamemode_CB(object sender, EventArgs e)
        {
            properties["force-gamemode"] = force_gamemode.Text;
        }

        private void level_seed_TB(object sender, System.Windows.Input.TextCompositionEventArgs e)
        {
            properties["level-seed"] = level_seed.Text;
        }

        private void white_list_CB(object sender, EventArgs e)
        {
            properties["white-list"] = white_list.Text;
        }

        private void enforece_gamemode_CB(object sender, EventArgs e)
        {
            properties["enforce-whitelist"] = enforce_white_list.Text;
        }

        private void TF_CB(object sender, EventArgs e)
        {
            properties[true_false.Text] = true_false_combo.Text;
        }

        private void IT_TB(object sender, System.Windows.Input.TextCompositionEventArgs e)
        {
            properties[input_text.Text] = input_text_txt.Text;
        }
    }
}


【info_builder.xaml.cs】
using System.IO;
using System.Windows;

namespace Server_GUI2
{
    /// <summary>
    /// info_builder.xaml の相互作用ロジック
    /// </summary>
    public partial class info_builder : Window
    {
        public info_builder()
        {
            InitializeComponent();
        }

        private void OK_Click(object sender, RoutedEventArgs e)
        {
            using (var writer = new StreamWriter($@"{MainWindow.Data_Path}\info.txt", false))
            {
                writer.WriteLine($"1>Your name in Minecraft------------->{name.Text}");
                writer.WriteLine($"2>The version of 'Server_bat-files'-->{this_version.Text}");
                writer.WriteLine($"3>The latest Minecraft version------->");
                writer.WriteLine($"4>The latest Minecraft World name---->");
                writer.WriteLine($"5>Is any Servers opening now ?------->False");
                writer.WriteLine($"6>Git Account Name------------------->{git_name.Text}");
                writer.WriteLine($"7>Git Account E-mail address--------->{git_address.Text}");
            }
            DialogResult = true;
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }
    }
}
