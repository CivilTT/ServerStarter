//using log4net;
//using System;
//using System.Linq;
//using System.IO;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.Reflection;
//using System.Windows;
//using System.Text.RegularExpressions;
//using Newtonsoft.Json;
//using MW = ModernWpf;

//namespace Server_GUI2.Develop.Server.World
//{

//    public class WorldWrapperCollection
//    {
//        public static WorldWrapperCollection Instance { get; } = new WorldWrapperCollection();
//        private RemotesJsonPath jsonPath = ServerGuiPath.Instance.RemotesJson;
//        /// <summary>
//        /// データ整合性のためリスト変換はしない。
//        /// インデックスアクセスはプロパティ化して常に更新が反映されるようにする。
//        /// </summary>
//        public ObservableCollection<WorldWrapper> WorldWrappers { get; } = new ObservableCollection<WorldWrapper>();
//        private WorldWrapperCollection()
//        {
//            var linkJson = LoadLinkJson();

//            //　ローカルワールド一覧とリンク情報を組み合わせてWorldWrapperを構成
//            foreach (var local in LocalWorldCollection.Instance.LocalWorlds)
//            {
//                var linkData = linkJson.Where(x =>
//                   x.LocalVersion == local.Version.Name &&
//                   x.LocalWorld == local.Name
//                    ).FirstOrDefault();

//                // 接続済みローカルはLinkedRemoteWorldWrapperとして扱う
//                // TODO: リモートとの通信ができなかった場合のフォールバック
//                // 通信できないワールドは一覧に追加しないorグレーアウトして選択できないように
//                if (linkData != null)
//                {
//                    var remote = StorageCollection.Instance.FindRemoteWorld(linkData.RemoteStorage, linkData.RemoteWorld);
//                    // TODO: usingフラグが立ちっぱなしだったらpushする
//                    // サーバー起動後にネットワークが切断された場合に起こりうる
//                    var wrapper = new LinkedWorldWrapper(remote,local);
//                    Add(wrapper);
//                }
//                // 未接続ローカルはUnLinkedLocalWorldWrapperとして扱う
//                else
//                {
//                    Add(new UnLinkedWorldWrapper(local));
//                }
//            }
//        }

//        /// <summary>
//        /// WorldWrapperを追加(自動呼び出し)
//        /// </summary>
//        public void Add(WorldWrapper wrapper)
//        {
//            WorldWrappers.Add(wrapper);
//            wrapper.DeleteEvent += new EventHandler((_, __) => WorldWrappers.Remove(wrapper));
//        }

//        /// <summary>
//        /// ローカルとリモートのリンク情報を取得
//        /// </summary>
//        public List<RemoteLinkJson> LoadLinkJson()
//        {
//            var json = jsonPath.ReadAllText();
//            return JsonConvert.DeserializeObject<List<RemoteLinkJson>>(json);
//        }

//        /// <summary>
//        /// ローカルとリモートの現在のリンク情報を保存
//        /// </summary>
//        public void SaveLinkJson()
//        {
//            // WorldWrappersからLinkedWorldWrapperを抜き出してjsonに保存
//            var obj = WorldWrappers.OfType<LinkedWorldWrapper>().Select(x => x.ExportLinkJson()).ToList();
//            JsonConvert.SerializeObject(obj);
//        }
//    }

//    /// <summary>
//    /// ローカルとリモートのワールドのリンクを保持するクラス
//    /// </summary>
//    public abstract class WorldWrapper
//    {
//        protected readonly ILog logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
//        public CustomMap CustomMap { get; set; }
//        public event EventHandler DeleteEvent;
//        public bool HasCustomMap => CustomMap != null;

//        /// <summary>
//        /// 起動関数を引数に取って起動
//        /// </summary>
//        public abstract void WrapRun(Version version, Action<ServerProperty> runFunc);

//        public abstract string DisplayName { get; }
//        public abstract DatapackCollection Datapacks { get; }
//        public abstract ServerProperty Property { get; }
//        public abstract Version Version { get; }

//        /// <summary>
//        /// 必要に応じてCutomMapを導入し、必要に応じてバージョンを変更する
//        /// 
//        /// </summary>
//        /// <param name="beforeVersion">現在ワールドデータがあるバージョン(ワールドのバージョンと同じ場合は省略可)</param>
//        /// <returns></returns>
//        protected void TryImportCustomMapAndChangeVersion(LocalWorld local,Version version)
//        {
//            if (HasCustomMap)
//            {
//                CustomMap.Import(local.Path.World.FullName);
//                // LocalWorldの中身に変更を反映(VtoSコンバート等も含む)
//                local.ReConstruct(local.Path, version, version.Type, local.Property, local.Datapacks);
//            }

//            //versionのダウングレードを確認して警告表示
//            if ( version < Version)
//            {
//                logger.Warn($"The World-Data will be recreated by {version} from {Version}");
//                var result = MW.MessageBox.Show(
//                    $"ワールドデータを{Version}から{version}へバージョンダウンしようとしています。\n" +
//                    $"データが破損する可能性が極めて高い操作ですが、危険性を理解したうえで実行しますか？", "Server Starter", MessageBoxButton.YesNo, MessageBoxImage.Warning);
//                if (result == MessageBoxResult.No)
//                {
//                    throw new DowngradeException("User reject downgrading");
//                }
//            }

//            // version変更
//            if ( local.Path.Parent != version.Path)
//            {
//                // versionのフォルダに移動するとともにVtoS変換
//                Console.WriteLine($"local.path: {local.Path}");
//                Console.WriteLine($"local.path: {version}");
//                var newPath = version.Path.GetWorldDirectory(local.Path.Name);
//                local.Move(newPath, version, version.Type, local.Property, local.Datapacks, addSuffixWhenNameCollided: true);
//            }
//        }

//        // WorldWrapperを削除(ワールド自体ではなくリンク情報が更新された場合など)
//        public virtual void Delete()
//        {
//            if (DeleteEvent != null) DeleteEvent(this,null);
//        }
//    }

//    /// <summary>
//    /// 新規ローカルワールド
//    /// </summary>
//    public class NewWorldWrapper : WorldWrapper
//    {
//        public override string DisplayName { get; }

//        public override DatapackCollection Datapacks { get; }
//        public override ServerProperty Property { get; }
//        public RemoteWorld RemoteWorld { get; private set; }
//        public bool HasRemoteWorld => RemoteWorld != null;

//        public bool IsValidName(string name)
//        {
//            return Regex.IsMatch(name, @"^[0-9a-zA-Z_-]$");
//        }
//        private string _worldName;

//        public string WorldName {
//            get => _worldName;
//            set
//            {
//                if (IsValidName(value))
//                    _worldName = value;
//            }
//        }

//        // バージョン情報はないのでnull
//        public override Version Version => null;
//        protected NewWorldWrapper():base()
//        {
//            Property = new ServerProperty();
//            Datapacks = new DatapackCollection(new List<string>());
//            DisplayName = "【new World】";
//            WorldName = "input_name";
//        }

//        /// <summary>
//        /// リモートワールドとリンクする
//        /// </summary>
//        public void Link(RemoteWorld remoteWorld)
//        {
//            if (HasRemoteWorld)
//                throw new RemoteLinkException("new world already has remote world");
//            RemoteWorld = remoteWorld;
//        }

//        /// <summary>
//        /// リモートワールドとのリンクを解除する
//        /// </summary>
//        public void UnLink()
//        {
//            if (!HasRemoteWorld)
//                throw new RemoteLinkException("new world doesn't have remote world");
//            RemoteWorld = null;
//        }

//        public override void WrapRun(Version version, Action<ServerProperty> runFunc)
//        {
//            // リモートがある場合
//            if (HasRemoteWorld)
//            {
//                // 既に存在するワールドをPullして使用する
//                if (RemoteWorld.Exist)
//                {
//                    WrapRun_ExistRemote(version, runFunc);
//                }
//                // ワールドを生成後リモートを新規作成しPush
//                else
//                {
//                    var path = ServerGuiPath.Instance.WorldData.GetVersionDirectory(version.Name).GetWorldDirectory(WorldName);
//                    var local = new LocalWorld(path, version);
//                    // FromLocalRemoteWorldWrapperの処理を実行
//                    var wrapper = new NewLinkedWorldWrapper(RemoteWorld, local);
//                    WorldWrapperCollection.Instance.Add(wrapper);
//                    // ワールド一覧から削除
//                    Delete();
//                    wrapper.WrapRun(version, runFunc);
//                }
//            }
//            // ただのローカルワールド
//            else
//            {
//                var path = ServerGuiPath.Instance.WorldData.GetVersionDirectory(version.Name).GetWorldDirectory(WorldName);
//                // 設定に応じたローカルワールドを作成
//                var local = new LocalWorld(path,version, version.Type,Property,Datapacks);
//                // UnLinkedLocalWorldWrapperの処理を実行
//                var wrapper = new UnLinkedWorldWrapper(local);
//                WorldWrapperCollection.Instance.Add(wrapper);
//                // ワールド一覧から削除
//                Delete();
//                wrapper.WrapRun(version,runFunc);
//            }
//        }

//        /// <summary>
//        /// 既に存在するワールドをPullして使用する
//        /// </summary>
//        private void WrapRun_ExistRemote(Version version, Action<ServerProperty> runFunc)
//        {
//            var path = ServerGuiPath.Instance.WorldData.GetVersionDirectory(version.Name).GetWorldDirectory(WorldName);

//            // ローカルワールドを新規作成
//            var local = new LocalWorld(path, version);

//            // Linkedとして起動
//            var wrapper = new LinkedWorldWrapper(RemoteWorld, local);
//            WorldWrapperCollection.Instance.Add(wrapper);
//            // ワールド一覧から削除
//            Delete();
//            wrapper.WrapRun(version, runFunc);

//        }
//    }

//    public abstract class ExistWorldWrapper : WorldWrapper
//    {
//        protected ExistWorldWrapper(IWorld world) : base()
//        {
//            this.world = world;
//        }
//        protected IWorld world { get; }
//        public override Version Version => world.Version;
//        public override ServerProperty Property => world.Property;
//        public override DatapackCollection Datapacks => world.Datapacks;
//    }

//    /// <summary>
//    /// リンクされていないローカルワールド
//    /// </summary>
//    public class UnLinkedWorldWrapper : ExistWorldWrapper
//    {
//        private LocalWorld LocalWorld { get; }
//        public UnLinkedWorldWrapper(LocalWorld world):base(world)
//        {
//            LocalWorld = world;
//        }

//        /// <summary>
//        /// リモートワールドとリンクする
//        /// </summary>
//        public NewLinkedWorldWrapper Link(RemoteWorld remoteWorld)
//        {            
//            var wrapper = new NewLinkedWorldWrapper(remoteWorld, LocalWorld);
//            WorldWrapperCollection.Instance.Add(wrapper);
//            // ワールド一覧から削除
//            Delete();
//            return wrapper;
//        }

//        /// <summary>
//        /// 起動関数を引数に取って起動
//        /// </summary>
//        public override void WrapRun(Version version, Action<ServerProperty> runFunc)
//        {
//            // カスタムマップの導入＋バージョン変更
//            TryImportCustomMapAndChangeVersion(LocalWorld,version);
//            // 実行
//            LocalWorld.WrapRun(runFunc);
//        }

//        public override string DisplayName => $"{LocalWorld.Version.Name}/{LocalWorld.Name}";
//    }

//    public abstract class ALinkedWorldWrapper : ExistWorldWrapper
//    {
//        public abstract UnLinkedWorldWrapper UnLink();
//        protected ALinkedWorldWrapper(IWorld world):base(world)
//        { }
//    }

//    /// <summary>
//    /// リンクされているリモートワールド
//    /// </summary>
//    public class LinkedWorldWrapper : ALinkedWorldWrapper
//    {
//        private bool Using;
//        private LocalWorld LocalWorld { get; }
//        private RemoteWorld RemoteWorld { get; }

//        public LinkedWorldWrapper(RemoteWorld remote,LocalWorld local):base(remote)
//        {
//            LocalWorld = local;
//            RemoteWorld = remote;
//            Using = false;

//            // remoteが削除されたときにローカルをUnlinkedに戻す
//            remote.DeleteEvent += new EventHandler((_, __) => UnLink());
//        }

//        public override UnLinkedWorldWrapper UnLink()
//        {
//            // リモートの情報をpull
//            RemoteWorld.ToLocal(LocalWorld);
//            var wrapper = new UnLinkedWorldWrapper(LocalWorld);
//            WorldWrapperCollection.Instance.Add(wrapper);
//            // ワールド一覧から削除
//            Delete();
//            return wrapper;
//        }

//        public RemoteLinkJson ExportLinkJson()
//        {
//            return new RemoteLinkJson(RemoteWorld,LocalWorld,Using);
//        }

//        /// <summary>
//        /// 起動関数を引数に取って起動
//        /// </summary>
//        public override void WrapRun(Version version, Action<ServerProperty> runFunc)
//        {
//            // リモートワールドを複数人が同時に開かないようにロック
//            RemoteWorld.WorldState.Using = true;
//            RemoteWorld.UpdateWorldState();

//            // Pull
//            RemoteWorld.ToLocal(LocalWorld);

//            // カスタムマップの導入＋バージョン変更
//            TryImportCustomMapAndChangeVersion(LocalWorld, version);

//            // LinkJsonを更新
//            Using = true;
//            WorldWrapperCollection.Instance.SaveLinkJson();

//            // 実行
//            LocalWorld.WrapRun(runFunc);

//            // LinkJsonを更新
//            Using = false;
//            WorldWrapperCollection.Instance.SaveLinkJson();

//            // Push
//            RemoteWorld.FromLocal(LocalWorld);

//            // リモートのワールドデータを更新し、ロック解除
//            RemoteWorld.WorldState.ServerProperty = LocalWorld.Property;
//            RemoteWorld.WorldState.Type = LocalWorld.Type?.ToStr();
//            RemoteWorld.WorldState.Version = version.Name;
//            RemoteWorld.WorldState.Datapacks = LocalWorld.Datapacks.GetNames();
//            RemoteWorld.WorldState.Using = false;
//            RemoteWorld.UpdateWorldState();
//        }
//        public override string DisplayName => $"{RemoteWorld.Version.Name}/{RemoteWorld.Name}";
//    }

//    /// <summary>
//    /// ローカルに合わせてリモートワールドを新規作成
//    /// </summary>
//    public class NewLinkedWorldWrapper : ALinkedWorldWrapper
//    {
//        private LocalWorld localWorld;
//        private RemoteWorld RemoteWorld { get; }
//        private bool Using;
//        public NewLinkedWorldWrapper(RemoteWorld remoteWorld, LocalWorld localWorld): base(localWorld)
//        {
//            this.localWorld = localWorld;
//            // すでにリンクされたリモートだった場合エラー
//            if (remoteWorld.Exist)
//                throw new RemoteLinkException("remote world is already linked.");
//            RemoteWorld = remoteWorld;
//        }

//        public override UnLinkedWorldWrapper UnLink()
//        {
//            // リモートの情報をpullする必要はないのでそのまま返す
//            var wrapper = new UnLinkedWorldWrapper(localWorld);
//            WorldWrapperCollection.Instance.Add(wrapper);
//            // ワールド一覧から削除
//            Delete();
//            return wrapper;
//        }

//        /// <summary>
//        /// 起動関数を引数に取って起動
//        /// </summary>
//        public override void WrapRun(Version version, Action<ServerProperty> runFunc)
//        {
//            // リモートワールドが存在することとする
//            RemoteWorld.WorldState.Exist = true;

//            // リモートワールドを複数人が同時に開かないようにロック
//            RemoteWorld.WorldState.Using = true;
//            RemoteWorld.UpdateWorldState();

//            // カスタムマップの導入＋バージョン変更
//            TryImportCustomMapAndChangeVersion(localWorld, version);

//            // 実行
//            localWorld.WrapRun(runFunc);


//            // Push
//            RemoteWorld.FromLocal(localWorld);

//            // リモートのワールドデータを更新し、ロック解除
//            RemoteWorld.WorldState.ServerProperty = localWorld.Property;
//            RemoteWorld.WorldState.Type = localWorld.Type?.ToStr();
//            RemoteWorld.WorldState.Version = version.Name;
//            RemoteWorld.WorldState.Datapacks = localWorld.Datapacks.GetNames();
//            RemoteWorld.WorldState.Using = false;
//            RemoteWorld.UpdateWorldState();

//            // Linkedになったのでインスタンスを変更
//            var wrapper = new LinkedWorldWrapper(RemoteWorld,localWorld);
//            WorldWrapperCollection.Instance.Add(wrapper);
//            // ワールド一覧から削除
//            Delete();

//            // LinkJsonを更新
//            Using = false;
//            WorldWrapperCollection.Instance.SaveLinkJson();
//        }
//        public override string DisplayName => $"{RemoteWorld.Version.Name}/{RemoteWorld.Name}";
//    }
//}
