@startuml main
title Classes

class App{
}

class Assembry{
  string version
}

class UpdateChecker{
  UpdateChecker()
  (string,string) ReadJsonForGit()
  StarterVersionUp()
}

class SystemEnvironment{
  string os
  string cpu
  string gpu
  string ram_all
  string ram_ava
  string ip
  string git
  string java
}

class Information{
  Information()
  void ReadFile()
  void CreateFile()
  void ShowInputGui()
  string userName
  bool alreadyOpened
  bool hasGitAccount
  string gitAccountName
  string gitAccountEmail
}

interface Window{
}

class SetUp{
  void ShowProgressBar()
  Updatechecker UpdateCheck()
  Information InformationCheck()
  SystemEnvironment SystemCheck()
  VersionFactory VersionFactory()
  WorldFactory WorldFactory()
  void CloseProgressBar()
  MainWindow export()
}


class SettingsWindow{
  SettingsWindow(ServerProperty serverProperty)
}

class MainWindow{
  Information information
  SystemEnvironment environment
  VersionFactory versionFactory
  WorldFactory worldFactory
  ServerProperty property

  void LoadVersionAndWorld()

  void SetInformation(Information info)

  void Start(Version version,World world)

  void InitVersionCombobox(string selected)
  void InitWorldCombobox(string selected)
}
MainWindow ..|> Window

class SettingWindow{
  MainWindow mainwindow
  ServerProperty property
}


SettingWindow ..|> Window

class Progress{
  string title
  int min
  int maxa
  int value
  string message
  string oldMessage
  void show()
  void close()
}
Progress ..|> Window

' ����l����
class ReactiveCombobox<T>{
  ReactiveCombobox(Combobox combobox,Button removeButton)
  T[] items
  void append(T value)
  void remove(T value)
}

class VersionFactory{
  {classifier} VersionFactory Instance
  VersionFactory()
  LoadFromCurrentDirectory() # Servers�f�B���N�g�����瑶�݂���o�[�W������ǂݎ��
  LoadAllVanillaVersions()
  LoadAllSpigotVersions()
  Version Create()
  void Remove(Version version)
  Version[] existingVersions
  Version[] allVanillaVersions
  Version[] allSpigotVersions
  Version activeVersion
  string[] getVersionNames()
}
Version ..* VersionFactory


class Version{
  Version(string name)
  string name
  string path
  bool exists
  bool isLatest
  bool isRelease
  bool isVanila
  void DownloadVersion()
  ServerProperty serverProperty { get; set; }
  bool gt(Version version)
}

class WorldFactory{
  {classifier} VersionFactory Instance
  bool DirectoryExists()
  LoadFromCurrentDirectory() # ���[���h�̃f�B���N�g�����瑶�݂��郏�[���h��ǂݎ��
  void InitializeDirectory()
  World Create()
  void Remove(World world)
  World[] worlds
  World activeWorld
  string[] getWorldNames()
}
World ..* WorldFactory


interface World{
  World(Version version,string name)
  string? customMap
  string name
  string path
  Version version
  bool exists
  void ChangeVersion(Version version)
  void Recreate()
  void SetCustomMap()
  void Open()
  void Close()
  void SaveState() #����N�����̂��߂Ƀf�[�^��ۑ�
}
Version <.. World
ServerProperty <.. World

class VanillaWorld{}
VanillaWorld ..|>World

class SpigotWorld{}
SpigotWorld ..|>World

class ShareWorld{}
ShareWorld ..|>World

class ServerProperty{
  string[] boolOptions
  string[] stringOptions
  void ExportToFile(string filepath)
}
ServerProperty <.. Version

class Server{
  World world
  void Run()
}

World <.. Server

@enduml
